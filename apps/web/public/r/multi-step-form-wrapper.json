{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-step-form-wrapper",
  "type": "registry:component",
  "title": "Multi Step Form Wrapper",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A multi step form wrapper component",
  "dependencies": [
    "react-hook-form",
    "zod",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "r/new-york/multi-step-form-wrapper/multi-step-form-wrapper.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport React, { useContext, createContext, useCallback, useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { CheckCircle2, ChevronLeft, ChevronRight, LoaderCircle, Circle } from 'lucide-react'\nimport { cn } from \"@/lib/utils\"\nimport { useForm, UseFormReturn, DefaultValues } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\n\ntype FormData = Record<string, unknown>\n\ninterface MultiStepFormContextType<T extends FormData = FormData> {\n  currentStep: number\n  totalSteps: number\n  formData: T\n  updateFormData: (stepData: Partial<T>) => void\n  goToNextStep: () => Promise<void>\n  goToPrevStep: () => void\n  goToStep: (step: number) => void\n  resetForm: () => void\n  isFirstStep: boolean\n  isLastStep: boolean\n  isComplete: boolean\n  isLoading: boolean\n  form: UseFormReturn<T>\n  getProgressPercentage: () => number\n  stepErrors: Record<number, string>\n}\n\nconst MultiStepFormContext = createContext<MultiStepFormContextType<any> | undefined>(undefined)\n\nexport function useMultiStepForm<T extends FormData = FormData>() {\n  const context = useContext(MultiStepFormContext) as MultiStepFormContextType<T>\n  if (!context) {\n    throw new Error(\"useMultiStepForm must be used within a MultiStepFormWrapper\")\n  }\n  return context\n}\n\nexport interface StepProps<T extends FormData = FormData> {\n  children: React.ReactNode\n  title?: string\n  description?: string\n  validate?: (data: T) => Promise<boolean> | boolean\n  schema?: z.ZodObject<any>\n  canSkip?: boolean\n  isOptional?: boolean\n  validationMessage?: string\n  onEnter?: (data: T) => void\n  onExit?: (data: T) => void\n}\n\nexport interface MultiStepFormWrapperProps<T extends FormData = FormData> {\n  children: React.ReactNode\n  className?: string\n  onComplete?: (data: T) => void\n  initialData?: Partial<T>\n  showStepIndicator?: boolean\n  showStepTitle?: boolean\n  allowSkipSteps?: boolean\n  navigationPosition?: 'bottom' | 'top'\n  nextButtonText?: string\n  prevButtonText?: string\n  completeButtonText?: string\n  onStepChange?: (prevStep: number, nextStep: number) => void\n  schema?: z.ZodType<T>\n  persistKey?: string\n  onStepValidationError?: (step: number, errors: any) => void\n  showProgressBar?: boolean\n  allowStepReset?: boolean\n  autoSave?: boolean\n  autoSaveDelay?: number\n  transitionDuration?: number\n  animateStepChange?: boolean\n}\n\nexport function Step<T extends FormData = FormData>({ children }: StepProps<T>): React.ReactNode {\n  return <>{children}</>\n}\n\nexport function MultiStepFormWrapper<T extends FormData = FormData>({\n  children,\n  className,\n  onComplete,\n  initialData = {} as Partial<T>,\n  showStepIndicator = true,\n  showStepTitle = true,\n  allowSkipSteps = false,\n  navigationPosition = 'bottom',\n  nextButtonText = \"Next\",\n  prevButtonText = \"Back\",\n  completeButtonText = \"Complete\",\n  onStepChange,\n  schema,\n  persistKey,\n  onStepValidationError,\n  showProgressBar = false,\n  allowStepReset = false,\n  autoSave = false,\n  autoSaveDelay = 1000,\n  transitionDuration = 300,\n  animateStepChange = true,\n}: MultiStepFormWrapperProps<T>): React.ReactNode {\n\n  const steps = React.Children.toArray(children).filter(\n    (child) => React.isValidElement(child) && child.type === Step\n  ) as React.ReactElement<StepProps<T>>[]\n\n  const prepareDefaultValues = useCallback((initialData: Partial<T>, schema?: z.ZodType<T>): DefaultValues<T> => {\n    const defaultValues = { ...initialData } as Record<string, any>;\n\n    if (schema && 'shape' in schema) {\n      const shapes = (schema as any).shape;\n      Object.keys(shapes).forEach(key => {\n        if (defaultValues[key] === undefined) {\n          defaultValues[key] = '';\n        }\n      });\n    }\n\n    return defaultValues as DefaultValues<T>;\n  }, [])\n\n  const [currentStep, setCurrentStep] = useState<number>(0)\n  const [formData, setFormData] = useState<T>(initialData as T)\n  const [isValidating, setIsValidating] = useState<boolean>(false)\n  const [isComplete, setIsComplete] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [stepErrors, setStepErrors] = useState<Record<number, string>>({})\n\n  const form = useForm<T>({\n    defaultValues: prepareDefaultValues(initialData, schema),\n    // @ts-expect-error-ignore // TODO: fix this\n    resolver: schema ? zodResolver(schema) : undefined,\n    mode: \"onChange\"\n  })\n\n  const isFirstStep = currentStep === 0\n  const isLastStep = currentStep === steps.length - 1\n  const CurrentStepComponent = steps[currentStep]\n  const { title, description, schema: stepSchema, onEnter, onExit } = CurrentStepComponent?.props || {}\n\n  React.useEffect(() => {\n    if (!autoSave || !persistKey) return\n\n    const handler = setTimeout(() => {\n      try {\n        localStorage.setItem(persistKey, JSON.stringify(formData))\n      } catch (error) {\n        console.warn('Failed to save form data to localStorage:', error)\n      }\n    }, autoSaveDelay)\n\n    return () => clearTimeout(handler)\n  }, [formData, autoSave, persistKey, autoSaveDelay])\n\n  React.useEffect(() => {\n    if (!persistKey) return\n\n    try {\n      const savedData = localStorage.getItem(persistKey)\n      if (savedData) {\n        const parsedData = JSON.parse(savedData)\n        setFormData(prevData => ({ ...prevData, ...parsedData }))\n\n        Object.entries(parsedData).forEach(([key, value]) => {\n          form.setValue(key as any, value as any)\n        })\n      }\n    } catch (error) {\n      console.warn('Failed to load form data from localStorage:', error)\n    }\n  }, [persistKey, form])\n\n  React.useEffect(() => {\n    if (onEnter) {\n      onEnter(formData)\n    }\n\n    return () => {\n      if (onExit) {\n        onExit(formData)\n      }\n    }\n  }, [currentStep, formData, onEnter, onExit])\n\n  React.useEffect(() => {\n    if (stepSchema) {\n      form.clearErrors();\n    }\n  }, [currentStep, form, stepSchema])\n\n  const updateFormData = useCallback((stepData: Partial<T>): void => {\n    setFormData((prev) => {\n      const newData = { ...prev, ...stepData };\n      return newData;\n    });\n\n    Object.entries(stepData).forEach(([key, value]) => {\n      form.setValue(key as any, value as any);\n    });\n  }, [form])\n\n  const resetForm = useCallback((): void => {\n    setCurrentStep(0);\n    setFormData(initialData as T);\n    setIsComplete(false);\n    setStepErrors({});\n    form.reset(prepareDefaultValues(initialData, schema));\n\n    if (persistKey) {\n      try {\n        localStorage.removeItem(persistKey);\n      } catch (error) {\n        console.warn('Failed to clear persisted form data:', error);\n      }\n    }\n  }, [initialData, schema, form, persistKey, prepareDefaultValues]);\n\n  const getProgressPercentage = useCallback((): number => {\n    return Math.round(((currentStep + 1) / steps.length) * 100);\n  }, [currentStep, steps.length]);\n\n  const goToNextStep = useCallback(async (): Promise<void> => {\n    const validate = CurrentStepComponent?.props.validate\n    const stepSchema = CurrentStepComponent?.props.schema\n    const canSkip = CurrentStepComponent?.props.canSkip || false\n\n    setStepErrors(prev => {\n      const newErrors = { ...prev }\n      delete newErrors[currentStep]\n      return newErrors\n    })\n\n    // Always sync form data before validation\n    const currentFormValues = form.getValues()\n    updateFormData(currentFormValues)\n\n    if (stepSchema && !canSkip) {\n      setIsValidating(true)\n      try {\n        const stepFields = Object.keys(stepSchema.shape)\n        const result = await form.trigger(stepFields as any)\n        if (!result) {\n          const formErrors = form.formState.errors\n          const errorMessage = CurrentStepComponent?.props.validationMessage || 'Please fix the validation errors'\n          setStepErrors(prev => ({ ...prev, [currentStep]: errorMessage }))\n          onStepValidationError?.(currentStep, formErrors)\n          return\n        }\n      } catch (error) {\n        console.error(\"Step schema validation error:\", error)\n        setStepErrors(prev => ({ ...prev, [currentStep]: 'Validation failed' }))\n        return\n      } finally {\n        setIsValidating(false)\n      }\n    } else if (validate && !canSkip) {\n      setIsValidating(true)\n      try {\n        const isValid = await validate({ ...formData, ...currentFormValues })\n        if (!isValid) {\n          const errorMessage = CurrentStepComponent?.props.validationMessage || 'Validation failed'\n          setStepErrors(prev => ({ ...prev, [currentStep]: errorMessage }))\n          return\n        }\n      } catch (error) {\n        console.error(\"Validation error:\", error)\n        setStepErrors(prev => ({ ...prev, [currentStep]: 'Validation failed' }))\n        return\n      } finally {\n        setIsValidating(false)\n      }\n    }\n\n    if (isLastStep) {\n      if (schema) {\n        const isValid = await form.trigger()\n        if (!isValid) return\n      }\n\n      setIsComplete(true)\n      setIsLoading(true)\n      try {\n        const finalData = { ...formData, ...currentFormValues }\n        await onComplete?.(finalData as T)\n      } catch (error) {\n        console.error(\"Error in onComplete callback:\", error)\n        setStepErrors(prev => ({ ...prev, [currentStep]: 'Failed to complete form submission' }))\n        setIsComplete(false)\n        return\n      } finally {\n        setIsLoading(false)\n      }\n      return\n    }\n\n    const prevStep = currentStep\n    const nextStep = currentStep + 1\n    setCurrentStep(nextStep)\n    onStepChange?.(prevStep, nextStep)\n  }, [currentStep, formData, isLastStep, CurrentStepComponent?.props, form, onComplete, onStepChange, schema, updateFormData, onStepValidationError])\n\n  const goToPrevStep = useCallback((): void => {\n    if (isFirstStep) return\n\n    const prevStep = currentStep\n    const nextStep = currentStep - 1\n    setCurrentStep(nextStep)\n    onStepChange?.(prevStep, nextStep)\n  }, [currentStep, isFirstStep, onStepChange])\n\n  const goToStep = useCallback((step: number): void => {\n    if (step < 0 || step >= steps.length || (!allowSkipSteps && step > currentStep)) return\n\n    const prevStep = currentStep\n    setCurrentStep(step)\n    onStepChange?.(prevStep, step)\n  }, [allowSkipSteps, currentStep, steps.length, onStepChange])\n\n  const renderNavigation = (): React.ReactNode => (\n    <div className=\"flex justify-between items-center mt-6\">\n      <Button\n        variant=\"ghost\"\n        onClick={goToPrevStep}\n        disabled={isFirstStep || isValidating}\n        className={cn(\"gap-1\", isFirstStep && \"invisible\")}\n      >\n        <ChevronLeft size={16} />\n        {prevButtonText}\n      </Button>\n\n      <Button\n        onClick={() => void goToNextStep()}\n        disabled={isValidating}\n        className=\"gap-1\"\n      >\n        {isValidating ? (\n          <LoaderCircle size={16} className=\"animate-spin mr-2\" />\n        ) : isLastStep ? (\n          completeButtonText\n        ) : (\n          <>\n            {nextButtonText}\n            <ChevronRight size={16} />\n          </>\n        )}\n      </Button>\n    </div>\n  )\n\n  const renderStepIndicators = (): React.ReactNode => (\n    <div className=\"flex justify-center items-center mb-6\">\n      {steps.map((_, index) => (\n        <React.Fragment key={index}>\n          {index > 0 && (\n            <div\n              className={cn(\n                \"h-[2px] w-8 mx-1 transition-colors\",\n                index <= currentStep ? \"bg-primary\" : \"bg-gray-300 dark:bg-gray-700\"\n              )}\n            />\n          )}\n          <div\n            className={cn(\n              \"flex items-center justify-center transition-all\",\n              allowSkipSteps && \"cursor-pointer hover:scale-110\"\n            )}\n            onClick={() => allowSkipSteps && goToStep(index)}\n            role={allowSkipSteps ? \"button\" : undefined}\n            tabIndex={allowSkipSteps ? 0 : undefined}\n            aria-label={allowSkipSteps ? `Go to step ${index + 1}` : undefined}\n          >\n            {index < currentStep ? (\n              <CheckCircle2 size={24} className=\"text-primary fill-primary/10\" />\n            ) : index === currentStep ? (\n              <div className=\"rounded-full border-2 border-primary p-1 w-6 h-6 flex items-center justify-center\">\n                <span className=\"text-xs font-medium\">{index + 1}</span>\n              </div>\n            ) : (\n              <Circle size={24} className=\"text-gray-300 dark:text-gray-700\" />\n            )}\n          </div>\n        </React.Fragment>\n      ))}\n    </div>\n  )\n\n  const contextValue = React.useMemo(() => ({\n    currentStep,\n    totalSteps: steps.length,\n    formData,\n    updateFormData,\n    goToNextStep,\n    goToPrevStep,\n    goToStep,\n    resetForm,\n    isFirstStep,\n    isLastStep,\n    isComplete,\n    isLoading: isValidating || isLoading,\n    form,\n    getProgressPercentage,\n    stepErrors,\n  }), [\n    currentStep,\n    steps.length,\n    formData,\n    updateFormData,\n    goToNextStep,\n    goToPrevStep,\n    goToStep,\n    resetForm,\n    isFirstStep,\n    isLastStep,\n    isComplete,\n    isValidating,\n    isLoading,\n    form,\n    getProgressPercentage,\n    stepErrors,\n  ])\n\n  return (\n    <div className={cn(\"max-w-2xl mx-auto\", className)}>\n      <MultiStepFormContext.Provider value={contextValue}>\n        {showStepIndicator && renderStepIndicators()}\n\n        {showProgressBar && (\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2\">\n              <span>Progress</span>\n              <span>{getProgressPercentage()}%</span>\n            </div>\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n              <div\n                className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${getProgressPercentage()}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n        {stepErrors[currentStep] && (\n          <div className=\"mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n            <p className=\"text-red-700 dark:text-red-400 text-sm\">{stepErrors[currentStep]}</p>\n          </div>\n        )}\n\n        {showStepTitle && (title || description) && (\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                {title && <h2 className=\"text-2xl font-bold dark:text-white\">{title}</h2>}\n                {description && <p className=\"text-gray-500 dark:text-gray-400 mt-1\">{description}</p>}\n              </div>\n              {allowStepReset && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={resetForm}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  Reset\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n\n        {navigationPosition === 'top' && renderNavigation()}\n\n        <div\n          className={cn(\n            \"mt-4 mb-4\",\n            animateStepChange && \"transition-all duration-300 ease-in-out\"\n          )}\n          style={{\n            transitionDuration: animateStepChange ? `${transitionDuration}ms` : undefined\n          }}\n        >\n          {CurrentStepComponent}\n        </div>\n\n        {navigationPosition === 'bottom' && renderNavigation()}\n      </MultiStepFormContext.Provider>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}