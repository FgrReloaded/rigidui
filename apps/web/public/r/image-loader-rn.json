{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-loader-rn",
  "type": "registry:component",
  "title": "Image Loader",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "An advanced image loading component for React Native with beautiful gradient loading effect and error handling",
  "dependencies": [
    "react-native-svg"
  ],
  "registryDependencies": [
    "https://reactnativereusables.com/r/new-york/text.json"
  ],
  "files": [
    {
      "path": "r/new-york/image-loader/image-loader-rn.tsx",
      "content": "import * as React from \"react\"\nimport { useState, useMemo, useEffect, useCallback, useRef } from 'react'\nimport { View, Animated, StyleSheet } from \"react-native\"\nimport Svg, { Defs, LinearGradient as SvgLinearGradient, Stop, Rect, Path } from 'react-native-svg'\nimport { cn } from \"@/lib/utils\"\nimport { Text } from \"@/components/ui/text\"\n\nconst defaultColorCombinations = [\n  { start: '#1a1a1f', middle: '#2a2a35', end: '#1f1f28' },\n  { start: '#2d2419', middle: '#3d3428', end: '#251f18' },\n  { start: '#1d2228', middle: '#2d3238', end: '#161a20' },\n  { start: '#141f14', middle: '#1f2a1f', end: '#0f1a0f' },\n  { start: '#0f0f1a', middle: '#1a1a25', end: '#0a0a15' },\n  { start: '#2d1d19', middle: '#3a2623', end: '#221410' },\n  { start: '#1a0f1f', middle: '#251a2a', end: '#150a1a' },\n  { start: '#141414', middle: '#2a2a2a', end: '#0a0a0a' },\n]\n\nconst hashString = (str: string): number => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash);\n}\n\nconst GradientPattern = React.memo(({\n  colors\n}: {\n  colors: ColorCombination;\n}) => {\n  return (\n    <Svg width=\"100%\" height=\"100%\" style={StyleSheet.absoluteFillObject}>\n      <Defs>\n        <SvgLinearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <Stop offset=\"0%\" stopColor={colors.start} stopOpacity=\"1\" />\n          <Stop offset=\"50%\" stopColor={colors.middle || colors.start} stopOpacity=\"1\" />\n          <Stop offset=\"100%\" stopColor={colors.end} stopOpacity=\"1\" />\n        </SvgLinearGradient>\n      </Defs>\n      <Rect width=\"100%\" height=\"100%\" fill=\"url(#grad)\" />\n    </Svg>\n  );\n})\n\nGradientPattern.displayName = \"GradientPattern\";\n\ninterface ColorCombination {\n  start: string;\n  middle?: string;\n  end: string;\n}\n\ninterface ImageLoaderProps {\n  src: string;\n  alt: string;\n  className?: string;\n  width?: number;\n  height?: number;\n  fallbackComponent?: React.ReactNode;\n  onLoad?: () => void;\n  onError?: () => void;\n  resizeMode?: \"cover\" | \"contain\" | \"stretch\" | \"center\";\n  customColors?: ColorCombination[];\n  seed?: number;\n}\n\nexport function ImageLoader({\n  src,\n  alt,\n  className,\n  width = 400,\n  height = 300,\n  fallbackComponent,\n  onLoad,\n  onError,\n  resizeMode = \"cover\",\n  customColors,\n  seed\n}: ImageLoaderProps) {\n  const [hasError, setHasError] = useState(false)\n  const fadeAnim = useRef(new Animated.Value(0)).current\n  const placeholderFade = useRef(new Animated.Value(1)).current\n\n  useEffect(() => {\n    fadeAnim.setValue(0)\n    placeholderFade.setValue(1)\n    setHasError(false)\n  }, [src, fadeAnim, placeholderFade])\n\n  const patternData = useMemo(() => {\n    const colorCombinations = customColors && customColors.length > 0 ? customColors : defaultColorCombinations\n    const seedValue = seed !== undefined ? seed : hashString(src || 'default')\n    const colorIndex = seedValue % colorCombinations.length\n    const selectedColors = colorCombinations[colorIndex]\n\n    return { colors: selectedColors }\n  }, [customColors, seed, src])\n\n  const handleLoad = useCallback(() => {\n    Animated.parallel([\n      Animated.timing(fadeAnim, {\n        toValue: 1,\n        duration: 500,\n        useNativeDriver: true,\n      }),\n      Animated.timing(placeholderFade, {\n        toValue: 0,\n        duration: 500,\n        useNativeDriver: true,\n      }),\n    ]).start()\n    onLoad?.()\n  }, [fadeAnim, placeholderFade, onLoad])\n\n  const handleError = useCallback(() => {\n    setHasError(true)\n    placeholderFade.setValue(0)\n    onError?.()\n  }, [placeholderFade, onError])\n\n  return (\n    <View\n      className={cn(\"relative overflow-hidden rounded-lg\", className)}\n      style={{ width, height }}\n      accessibilityLabel={alt}\n      accessibilityRole=\"image\"\n    >\n      {!hasError && (\n        <Animated.View\n          style={[\n            StyleSheet.absoluteFillObject,\n            { opacity: placeholderFade }\n          ]}\n        >\n          <GradientPattern colors={patternData.colors} />\n        </Animated.View>\n      )}\n\n      {!hasError && (\n        <Animated.Image\n          source={{ uri: src }}\n          style={[\n            StyleSheet.absoluteFillObject,\n            { opacity: fadeAnim }\n          ]}\n          resizeMode={resizeMode}\n          onLoad={handleLoad}\n          onError={handleError}\n        />\n      )}\n\n      {hasError && (\n        <View className=\"absolute inset-0 flex items-center justify-center bg-muted\">\n          {fallbackComponent ? (\n            fallbackComponent\n          ) : (\n            <View className=\"items-center\">\n              <Svg width={48} height={48} viewBox=\"0 0 24 24\" fill=\"none\" className=\"mb-2\">\n                <Path\n                  stroke=\"#888888\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                />\n              </Svg>\n              <Text className=\"text-sm text-muted-foreground\">Failed to load image</Text>\n            </View>\n          )}\n        </View>\n      )}\n    </View>\n  )\n}\n\n",
      "type": "registry:component"
    }
  ]
}