{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "smart-search",
  "type": "registry:component",
  "title": "Smart Search",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A smart search component",
  "dependencies": [
    "@tanstack/react-pacer"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "r/new-york/smart-search/smart-search.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect, useRef } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { useDebouncer } from '@tanstack/react-pacer'\nimport { Search, X, Clock, Hash } from 'lucide-react'\nimport { Input } from '@/components/ui/input'\nimport { cn } from \"@/lib/utils\"\n\ninterface SearchFilter {\n  key: string\n  label: string\n  icon?: React.ReactNode\n}\n\ninterface SmartSearchProps {\n  className?: string\n  placeholder?: string\n  debounceMs?: number\n  urlSync?: boolean\n  onSearch?: (query: string, filters?: string[]) => void\n  searchHistory?: boolean\n  suggestions?: string[]\n  onSuggestionSelect?: (suggestion: string) => void\n  searchFilters?: SearchFilter[]\n  onFilterChange?: (filters: string[]) => void\n  resultCount?: number\n  maxHistoryItems?: number\n}\n\nexport function SmartSearch({\n  className,\n  placeholder = \"Search...\",\n  debounceMs = 300,\n  urlSync = true,\n  onSearch,\n  searchHistory = false,\n  suggestions = [],\n  onSuggestionSelect,\n  searchFilters = [],\n  onFilterChange,\n  resultCount,\n  maxHistoryItems = 10\n}: SmartSearchProps) {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const [query, setQuery] = useState('')\n  const [showSuggestions, setShowSuggestions] = useState(false)\n  const [searchHistoryList, setSearchHistoryList] = useState<string[]>([])\n  const [selectedIndex, setSelectedIndex] = useState(-1)\n  const [activeFilters, setActiveFilters] = useState<string[]>([])\n  const [searchState, setSearchState] = useState<'idle' | 'searching' | 'success' | 'error'>('idle')\n  const inputRef = useRef<HTMLInputElement>(null)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n  const isInternalUpdate = useRef(false)\n\n  const searchDebouncer = useDebouncer(\n    (searchQuery: string, filters: string[] = []) => {\n      setSearchState('searching')\n      onSearch?.(searchQuery, filters)\n      saveToHistory(searchQuery)\n      setTimeout(() => setSearchState('success'), 200)\n    },\n    {\n      wait: debounceMs\n    }\n  )\n\n  const isLoading = searchDebouncer.getIsPending()\n\n  useEffect(() => {\n    if (searchHistory) {\n      const history = JSON.parse(localStorage.getItem('smart-search-history') || '[]')\n      setSearchHistoryList(history)\n    }\n  }, [searchHistory])\n\n  const parseSearchQuery = (query: string) => {\n    const filters: string[] = []\n    let cleanQuery = query\n\n    const filterRegex = /(\\w+):(\\w+)/g\n    let match\n    while ((match = filterRegex.exec(query)) !== null) {\n      filters.push(`${match[1]}:${match[2]}`)\n      cleanQuery = cleanQuery.replace(match[0], '').trim()\n    }\n\n    return { filters, cleanQuery }\n  }\n\n  const saveToHistory = (searchQuery: string) => {\n    if (searchHistory && searchQuery.trim()) {\n      const history = JSON.parse(localStorage.getItem('smart-search-history') || '[]')\n      const newHistory = [\n        searchQuery,\n        ...history.filter((item: string) => item !== searchQuery)\n      ].slice(0, maxHistoryItems)\n      localStorage.setItem('smart-search-history', JSON.stringify(newHistory))\n      setSearchHistoryList(newHistory)\n    }\n  }\n\n  const clearHistory = () => {\n    localStorage.removeItem('smart-search-history')\n    setSearchHistoryList([])\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    const filteredSuggestions = suggestions.filter(s =>\n      s.toLowerCase().includes(query.toLowerCase())\n    )\n    const filteredHistory = searchHistoryList.filter(h =>\n      h.toLowerCase().includes(query.toLowerCase()) && h !== query\n    )\n    const allItems = [...filteredSuggestions, ...filteredHistory]\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault()\n        setSelectedIndex(prev => (prev + 1) % allItems.length)\n        setShowSuggestions(true)\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        setSelectedIndex(prev => prev <= 0 ? allItems.length - 1 : prev - 1)\n        setShowSuggestions(true)\n        break\n      case 'Enter':\n        e.preventDefault()\n        if (selectedIndex >= 0 && allItems[selectedIndex]) {\n          const selectedItem = allItems[selectedIndex]\n          handleSearch(selectedItem)\n          onSuggestionSelect?.(selectedItem)\n        } else if (query.trim()) {\n          const { filters, cleanQuery } = parseSearchQuery(query)\n          searchDebouncer.maybeExecute(cleanQuery, [...activeFilters, ...filters])\n        }\n        setShowSuggestions(false)\n        setSelectedIndex(-1)\n        break\n      case 'Escape':\n        setShowSuggestions(false)\n        setSelectedIndex(-1)\n        inputRef.current?.blur()\n        break\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    isInternalUpdate.current = true\n    setQuery(value)\n    setSearchState('idle')\n\n    if (value.trim()) {\n      const { filters, cleanQuery } = parseSearchQuery(value)\n      const combinedFilters = [...activeFilters, ...filters]\n      searchDebouncer.maybeExecute(cleanQuery, combinedFilters)\n      onFilterChange?.(combinedFilters)\n    } else {\n      searchDebouncer.cancel()\n      onSearch?.(value, activeFilters)\n      setSearchState('idle')\n    }\n\n    if (urlSync) {\n      const params = new URLSearchParams(searchParams)\n      if (value) {\n        params.set('q', value)\n      } else {\n        params.delete('q')\n      }\n      router.replace(`${window.location.pathname}?${params.toString()}`, { scroll: false })\n    }\n    setTimeout(() => {\n      isInternalUpdate.current = false\n    }, 0)\n  }\n\n  const handleSearch = (value: string) => {\n    setQuery(value)\n    setSearchState('idle')\n\n    if (value.trim()) {\n      const { filters, cleanQuery } = parseSearchQuery(value)\n      const combinedFilters = [...activeFilters, ...filters]\n      searchDebouncer.maybeExecute(cleanQuery, combinedFilters)\n      onFilterChange?.(combinedFilters)\n    } else {\n      searchDebouncer.cancel()\n      onSearch?.(value, activeFilters)\n      setSearchState('idle')\n    }\n  }\n\n  const handleSuggestionClick = (suggestion: string) => {\n    handleSearch(suggestion)\n    onSuggestionSelect?.(suggestion)\n    setShowSuggestions(false)\n    setSelectedIndex(-1)\n  }\n\n  const toggleFilter = (filterKey: string) => {\n    const newFilters = activeFilters.includes(filterKey)\n      ? activeFilters.filter(f => f !== filterKey)\n      : [...activeFilters, filterKey]\n\n    setActiveFilters(newFilters)\n    onFilterChange?.(newFilters)\n\n    if (query.trim()) {\n      searchDebouncer.maybeExecute(query, newFilters)\n    }\n  }\n\n  const clearQuery = () => {\n    setQuery('')\n    setShowSuggestions(false)\n    setSelectedIndex(-1)\n    setSearchState('idle')\n    onSearch?.('', activeFilters)\n\n    if (urlSync) {\n      const params = new URLSearchParams(searchParams)\n      params.delete('q')\n      router.replace(`${window.location.pathname}?${params.toString()}`, { scroll: false })\n    }\n\n    inputRef.current?.focus()\n  }\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowSuggestions(false)\n        setSelectedIndex(-1)\n      }\n    }\n\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      if (event.key === '/' && (event.ctrlKey || event.metaKey)) {\n        event.preventDefault()\n        inputRef.current?.focus()\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    document.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n      document.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (urlSync) {\n      const urlQuery = searchParams.get('q') || ''\n      if (urlQuery && !query) {\n        setQuery(urlQuery)\n        const { filters, cleanQuery } = parseSearchQuery(urlQuery)\n        searchDebouncer.maybeExecute(cleanQuery, [...activeFilters, ...filters])\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const filteredSuggestions = suggestions.filter(s =>\n    s.toLowerCase().includes(query.toLowerCase()) && s !== query\n  )\n  const filteredHistory = searchHistoryList.filter(h =>\n    h.toLowerCase().includes(query.toLowerCase()) && h !== query\n  )\n\n  return (\n    <div className={cn(\"relative\", className)} ref={dropdownRef}>\n      {searchFilters.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mb-2\">\n          {searchFilters.map((filter) => (\n            <button\n              key={filter.key}\n              onClick={() => toggleFilter(filter.key)}\n              className={cn(\n                \"inline-flex items-center gap-1 px-2 py-1 text-xs rounded-full border transition-colors\",\n                activeFilters.includes(filter.key)\n                  ? \"bg-primary/10 border-primary/20 text-primary\"\n                  : \"bg-muted border-border text-muted-foreground hover:bg-muted/80\"\n              )}\n            >\n              {filter.icon && <span className=\"w-3 h-3\">{filter.icon}</span>}\n              {filter.label}\n            </button>\n          ))}\n        </div>\n      )}\n\n      <div className=\"relative group\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <Search className={cn(\n            \"h-5 w-5 transition-colors duration-200\",\n            searchState === 'searching' && \"text-primary\",\n            searchState === 'success' && \"text-green-500\",\n            searchState === 'error' && \"text-destructive\",\n            searchState === 'idle' && \"text-muted-foreground group-focus-within:text-foreground\"\n          )} />\n        </div>\n\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={() => setShowSuggestions(true)}\n          placeholder={placeholder}\n          className=\"pl-10 pr-10 transition-all duration-200\"\n        />\n\n        {query && (\n          <button\n            onClick={clearQuery}\n            className=\"absolute inset-y-0 right-8 flex items-center pr-1\"\n          >\n            <X className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n          </button>\n        )}\n\n        {isLoading && query.trim() && (\n          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n            <div className=\"relative\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary/30 border-t-primary\"></div>\n              <div className=\"absolute inset-0 rounded-full bg-primary/10 animate-pulse\"></div>\n            </div>\n          </div>\n        )}\n\n        {query.trim() && !isLoading && resultCount !== undefined && (\n          <div className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full shadow-lg\">\n            {resultCount}\n          </div>\n        )}\n      </div>\n\n      {showSuggestions && (filteredSuggestions.length > 0 || filteredHistory.length > 0) && (\n        <div className=\"absolute top-full left-0 right-0 z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 max-h-64 overflow-y-auto\">\n          {filteredSuggestions.length > 0 && (\n            <div className=\"p-1\">\n              <div className=\"px-2 py-1.5 text-xs font-semibold text-muted-foreground\">\n                Suggestions\n              </div>\n              {filteredSuggestions.map((suggestion, index) => (\n                <button\n                  key={`suggestion-${index}`}\n                  onClick={() => handleSuggestionClick(suggestion)}\n                  className={cn(\n                    \"relative flex w-full cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50 hover:bg-accent hover:text-accent-foreground\",\n                    selectedIndex === index && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Hash className=\"h-3 w-3 text-muted-foreground\" />\n                  {suggestion}\n                </button>\n              ))}\n            </div>\n          )}\n\n          {filteredHistory.length > 0 && (\n            <div className=\"p-1\">\n              {filteredSuggestions.length > 0 && (\n                <div className=\"-mx-1 my-1 h-px bg-muted\" />\n              )}\n              <div className=\"flex items-center justify-between px-2 py-1.5\">\n                <span className=\"text-xs font-semibold text-muted-foreground\">Recent Searches</span>\n                <button\n                  onClick={clearHistory}\n                  className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Clear\n                </button>\n              </div>\n              {filteredHistory.map((historyItem, index) => (\n                <button\n                  key={`history-${index}`}\n                  onClick={() => handleSuggestionClick(historyItem)}\n                  className={cn(\n                    \"relative flex w-full cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50 hover:bg-accent hover:text-accent-foreground\",\n                    selectedIndex === filteredSuggestions.length + index && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                  {historyItem}\n                </button>\n              ))}\n            </div>\n          )}\n\n          <div className=\"-mx-1 my-1 h-px bg-muted\" />\n          <div className=\"px-2 py-1.5 bg-muted/50 text-xs text-muted-foreground\">\n            <div className=\"flex justify-between\">\n              <span>↑↓ Navigate • ⏎ Select • ⎋ Close</span>\n              <span>Ctrl+/ Focus</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}