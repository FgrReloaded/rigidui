{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notification-center",
  "type": "registry:component",
  "title": "Notification Center",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A notification center component",
  "dependencies": [
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "popover",
    "card",
    "scroll-area",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "r/new-york/notification-center/notification-center.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect, useMemo } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n  Bell,\n  BellRing,\n  Check,\n  CheckCheck,\n  Trash2,\n  Filter,\n  MoreHorizontal,\n  X\n} from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\nexport interface Notification {\n  id: string\n  title: string\n  message: string\n  isRead: boolean\n  createdAt: string\n  priority?: 'low' | 'medium' | 'high'\n}\n\n\n\nexport interface NotificationCenterProps {\n  className?: string\n  variant?: 'full' | 'popover'\n  notifications?: Notification[]\n  fetchNotifications?: () => Promise<Notification[]>\n  onMarkAsRead?: (id: string) => Promise<void>\n  onMarkAllAsRead?: () => Promise<void>\n  onDeleteNotification?: (id: string) => Promise<void>\n  onNotificationClick?: (notification: Notification) => void\n  showFilter?: boolean\n  showMarkAllRead?: boolean\n  enableRealTimeUpdates?: boolean\n  updateInterval?: number\n  enableBrowserNotifications?: boolean\n  emptyState?: {\n    title?: string\n    description?: string\n  }\n}\n\nconst defaultFetchNotifications = async (): Promise<Notification[]> => {\n  await new Promise(resolve => setTimeout(resolve, 500))\n  return []\n}\n\nconst defaultMarkAsRead = async (): Promise<void> => {\n  await new Promise(resolve => setTimeout(resolve, 300))\n}\n\nconst defaultMarkAllAsRead = async (): Promise<void> => {\n  await new Promise(resolve => setTimeout(resolve, 500))\n}\n\nconst defaultDeleteNotification = async (): Promise<void> => {\n  await new Promise(resolve => setTimeout(resolve, 300))\n}\n\nconst formatTimeAgo = (dateString: string) => {\n  const now = new Date()\n  const date = new Date(dateString)\n  const diff = now.getTime() - date.getTime()\n\n  const minutes = Math.floor(diff / (1000 * 60))\n  const hours = Math.floor(diff / (1000 * 60 * 60))\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n\n  if (minutes < 1) return 'Just now'\n  if (minutes < 60) return `${minutes}m ago`\n  if (hours < 24) return `${hours}h ago`\n  return `${days}d ago`\n}\n\nconst getPriorityColor = (priority?: 'low' | 'medium' | 'high') => {\n  switch (priority) {\n    case 'high':\n      return 'text-red-500'\n    case 'medium':\n      return 'text-yellow-500'\n    case 'low':\n      return 'text-green-500'\n    default:\n      return 'text-muted-foreground'\n  }\n}\n\n\n\nconst NotificationItem = ({\n  notification,\n  onMarkAsRead,\n  onDelete,\n  onClick\n}: {\n  notification: Notification\n  onMarkAsRead?: (id: string) => void\n  onDelete?: (id: string) => void\n  onClick?: (notification: Notification) => void\n}) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(notification)\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-start gap-3 p-4 border rounded-lg\",\n        !notification.isRead && \"bg-muted/30\",\n        onClick && 'cursor-pointer'\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"shrink-0\">\n        <Bell className={cn('h-4 w-4', getPriorityColor(notification.priority))} />\n      </div>\n\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <h4 className={cn(\n                \"text-sm font-medium\",\n                !notification.isRead && \"font-semibold\"\n              )}>\n                {notification.title}\n              </h4>\n              {!notification.isRead && (\n                <Badge variant=\"default\" className=\"text-xs\">\n                  New\n                </Badge>\n              )}\n            </div>\n\n            <p className={cn(\n              \"text-sm mt-1\",\n              !notification.isRead ? \"text-foreground\" : \"text-muted-foreground\"\n            )}>\n              {notification.message}\n            </p>\n\n            <div className=\"flex items-center justify-between mt-3 pt-2 border-t\">\n              <span className=\"text-xs text-muted-foreground\">\n                {formatTimeAgo(notification.createdAt)}\n              </span>\n\n              {notification.priority && (\n                <Badge\n                  variant={\n                    notification.priority === 'high' ? 'destructive' :\n                      notification.priority === 'medium' ? 'default' : 'secondary'\n                  }\n                  className=\"text-xs\"\n                >\n                  {notification.priority}\n                </Badge>\n              )}\n            </div>\n          </div>\n\n          {(onMarkAsRead || onDelete) && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-8 w-8 p-0\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {!notification.isRead && onMarkAsRead && (\n                  <DropdownMenuItem onClick={(e) => {\n                    e.stopPropagation()\n                    onMarkAsRead(notification.id)\n                  }}>\n                    <Check className=\"mr-2 h-4 w-4\" />\n                    Mark as read\n                  </DropdownMenuItem>\n                )}\n                {onDelete && (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onDelete(notification.id)\n                    }}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Delete\n                  </DropdownMenuItem>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport function NotificationCenter({\n  className,\n  variant = 'full',\n  notifications: staticNotifications,\n  fetchNotifications = defaultFetchNotifications,\n  onMarkAsRead = defaultMarkAsRead,\n  onMarkAllAsRead = defaultMarkAllAsRead,\n  onDeleteNotification = defaultDeleteNotification,\n  onNotificationClick,\n  showFilter = true,\n  showMarkAllRead = true,\n  enableRealTimeUpdates = false,\n  updateInterval = 30000,\n  enableBrowserNotifications = false,\n  emptyState = {\n    title: \"No notifications\",\n    description: \"New notifications will appear here.\"\n  }\n}: NotificationCenterProps) {\n  const [filter, setFilter] = useState<'all' | 'unread'>('all')\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n  const queryClient = useQueryClient()\n\n  useEffect(() => {\n    if (enableBrowserNotifications && typeof window !== 'undefined' && 'Notification' in window) {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n    }\n  }, [enableBrowserNotifications]);\n\n  useEffect(() => {\n    if (!enableRealTimeUpdates) return\n\n    const interval = setInterval(() => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] })\n    }, updateInterval)\n\n    return () => clearInterval(interval)\n  }, [enableRealTimeUpdates, updateInterval, queryClient])\n\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['notifications'],\n    queryFn: fetchNotifications,\n    initialData: staticNotifications,\n    refetchInterval: enableRealTimeUpdates ? updateInterval : false,\n    enabled: !staticNotifications\n  })\n\n  const displayNotifications = staticNotifications || notifications\n  const prevDisplayNotificationsRef = React.useRef<Notification[]>(null);\n\n  useEffect(() => {\n    if (enableBrowserNotifications && typeof window !== 'undefined' && 'Notification' in window && Notification.permission === 'granted') {\n      const oldNotifications = prevDisplayNotificationsRef.current;\n\n      if (oldNotifications) {\n        const newNotifications = displayNotifications.filter(\n          (n) => !oldNotifications.some((on) => on.id === n.id)\n        );\n\n        newNotifications.forEach((notification) => {\n          if (!notification.isRead) {\n            new Notification(notification.title, {\n              body: notification.message,\n            });\n          }\n        });\n      }\n    }\n    prevDisplayNotificationsRef.current = displayNotifications;\n  }, [displayNotifications, enableBrowserNotifications]);\n\n  const markAsReadMutation = useMutation({\n    mutationFn: onMarkAsRead,\n    onSuccess: (_, id) => {\n      if (staticNotifications) return\n\n      queryClient.setQueryData(['notifications'], (old: Notification[] = []) =>\n        old.map(n => n.id === id ? { ...n, isRead: true } : n)\n      )\n    }\n  })\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: onMarkAllAsRead,\n    onSuccess: () => {\n      if (staticNotifications) return\n\n      queryClient.setQueryData(['notifications'], (old: Notification[] = []) =>\n        old.map(n => ({ ...n, isRead: true }))\n      )\n    }\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: onDeleteNotification,\n    onSuccess: (_, id) => {\n      if (staticNotifications) return\n\n      queryClient.setQueryData(['notifications'], (old: Notification[] = []) =>\n        old.filter(n => n.id !== id)\n      )\n    }\n  })\n\n  const filteredNotifications = useMemo(() =>\n    displayNotifications.filter(n => filter === 'all' || !n.isRead),\n    [displayNotifications, filter]\n  )\n\n  const unreadCount = useMemo(() =>\n    displayNotifications.filter(n => !n.isRead).length,\n    [displayNotifications]\n  )\n\n  const NotificationList = () => (\n    <ScrollArea className=\"h-96\">\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"flex flex-col items-center gap-3\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <p className=\"text-sm text-muted-foreground\">Loading notifications...</p>\n          </div>\n        </div>\n      ) : filteredNotifications.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center py-12 px-4 text-center\">\n          <BellRing className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <h3 className=\"font-semibold text-lg mb-2\">\n            {filter === 'unread' ? 'All caught up!' : emptyState.title}\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {filter === 'unread'\n              ? 'You have no unread notifications.'\n              : emptyState.description\n            }\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-2 p-4\">\n          {filteredNotifications.map((notification) => (\n            <NotificationItem\n              key={notification.id}\n              notification={notification}\n              onMarkAsRead={staticNotifications ? undefined : markAsReadMutation.mutate}\n              onDelete={staticNotifications ? undefined : deleteMutation.mutate}\n              onClick={onNotificationClick}\n            />\n          ))}\n        </div>\n      )}\n    </ScrollArea>\n  )\n\n  if (variant === 'popover') {\n    return (\n      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className={className}\n          >\n            <Bell className=\"h-4 w-4\" />\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 p-0 text-xs flex items-center justify-center\">\n                {unreadCount > 9 ? '9+' : unreadCount}\n              </Badge>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-80 p-0\">\n          <div className=\"p-4 border-b\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <h4 className=\"font-semibold\">Notifications</h4>\n                {unreadCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {unreadCount} new\n                  </Badge>\n                )}\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0\"\n                onClick={() => setIsPopoverOpen(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"p-4\">\n            {(showFilter || (showMarkAllRead && unreadCount > 0)) && (\n              <div className=\"flex items-center gap-2 mb-3 justify-between\">\n                {showFilter && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFilter(filter === 'all' ? 'unread' : 'all')}\n                  >\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    {filter === 'all' ? 'Unread' : 'All'}\n                  </Button>\n                )}\n\n                {showMarkAllRead && unreadCount > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => markAllAsReadMutation.mutate()}\n                    disabled={markAllAsReadMutation.isPending}\n                  >\n                    <CheckCheck className=\"mr-2 h-4 w-4\" />\n                    Mark All Read\n                  </Button>\n                )}\n              </div>\n            )}\n\n            <div className=\"max-h-96\">\n              <NotificationList />\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    )\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-3\">\n            <Bell className=\"h-5 w-5\" />\n            <span>Notifications</span>\n            {unreadCount > 0 && (\n              <Badge variant=\"secondary\">\n                {unreadCount} new\n              </Badge>\n            )}\n          </CardTitle>\n\n          <div className=\"flex items-center gap-2\">\n            {showFilter && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setFilter(filter === 'all' ? 'unread' : 'all')}\n              >\n                <Filter className=\"mr-2 h-4 w-4\" />\n                {filter === 'all' ? 'Show Unread' : 'Show All'}\n              </Button>\n            )}\n\n            {showMarkAllRead && unreadCount > 0 && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => markAllAsReadMutation.mutate()}\n                disabled={markAllAsReadMutation.isPending}\n              >\n                <CheckCheck className=\"mr-2 h-4 w-4\" />\n                Mark All Read\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <NotificationList />\n      </CardContent>\n    </Card>\n  )\n}",
      "type": "registry:component"
    }
  ]
}