{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-uploader-rn",
  "type": "registry:component",
  "title": "File Uploader",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A file uploader component for react native",
  "dependencies": [
    "expo-document-picker",
    "@react-native-vector-icons/ant-design"
  ],
  "registryDependencies": [
    "https://reactnativereusables.com/r/new-york/card.json",
    "https://reactnativereusables.com/r/new-york/button.json",
    "https://reactnativereusables.com/r/new-york/badge.json"
  ],
  "files": [
    {
      "path": "r/new-york/file-uploader/file-uploader.tsx",
      "content": "\"use client\"\nimport React, { useState, useRef, useCallback, useEffect, createContext, useContext } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Upload, X, File, FileText, FileVideo, FileAudio, Check, AlertCircle, Image as ImageIcon, Crop as CropIcon } from 'lucide-react';\nimport ReactCrop, { type Crop, centerCrop, makeAspectCrop, convertToPixelCrop } from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nexport interface FileWithPreview {\n  id: string;\n  file: File;\n  name: string;\n  size: number;\n  type: string;\n  progress: number;\n  status: 'uploading' | 'complete' | 'error';\n  error?: string | null;\n  preview?: string | null;\n  croppedPreview?: string | null;\n  originalFile?: File;\n}\n\n\n\ninterface FileUploaderContextType {\n  files: FileWithPreview[];\n  maxFiles: number;\n  maxSize: number;\n  accept: string[];\n  onFilesReady?: (files: File[]) => void;\n  addFiles: (files: FileList) => void;\n  removeFile: (fileId: string) => void;\n  clearAllFiles: () => void;\n  updateFile: (fileId: string, updates: Partial<FileWithPreview>) => void;\n  formatFileSize: (bytes: number) => string;\n  validateFile: (file: File) => string | null;\n  getFileIcon: (file: File) => React.ReactNode;\n  openCropDialog: (file: FileWithPreview) => void;\n  cropDialogOpen: boolean;\n  setCropDialogOpen: (open: boolean) => void;\n  currentCropFile: FileWithPreview | null;\n  setCurrentCropFile: (file: FileWithPreview | null) => void;\n}\n\nconst FileUploaderContext = createContext<FileUploaderContextType | null>(null);\n\nconst useFileUploader = () => {\n  const context = useContext(FileUploaderContext);\n  if (!context) {\n    throw new Error('FileUploader components must be used within a FileUploader');\n  }\n  return context;\n};\n\nconst FileUploaderProgress = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { value?: number }\n>(({ className, value = 0, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"relative w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <div\n      className=\"h-full w-full flex-1 bg-primary transition-all duration-300 ease-in-out\"\n      style={{ width: `${value}%` }}\n    />\n  </div>\n));\nFileUploaderProgress.displayName = \"FileUploaderProgress\";\n\ninterface FileUploaderPreviewProps {\n  file: FileWithPreview;\n  className?: string;\n}\n\nfunction FileUploaderPreview({ file, className }: FileUploaderPreviewProps) {\n  const { getFileIcon } = useFileUploader();\n\n  if (file.preview) {\n    return (\n      <div className={cn(\"w-12 h-12 rounded-md overflow-hidden shrink-0 border\", className)}>\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          src={file.croppedPreview || file.preview}\n          alt={file.name}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"w-12 h-12 bg-muted rounded-md flex items-center justify-center shrink-0 border\", className)}>\n      {file.error ? (\n        <AlertCircle className=\"w-6 h-6 text-destructive\" />\n      ) : (\n        getFileIcon(file.file)\n      )}\n    </div>\n  );\n}\n\ninterface CropTriggerProps {\n  file: FileWithPreview;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nfunction CropTrigger({ file, className, children }: CropTriggerProps) {\n  const { openCropDialog } = useFileUploader();\n\n  const handleClick = () => {\n    openCropDialog(file);\n  };\n\n  if (children) {\n    return (\n      <div onClick={handleClick} className={className}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={handleClick}\n      className={cn(\n        \"shrink-0 h-8 w-8 rounded-full opacity-70 hover:opacity-100 hover:bg-primary/10 hover:text-primary\",\n        className\n      )}\n      title=\"Crop image\"\n    >\n      <CropIcon className=\"w-4 h-4\" />\n    </Button>\n  );\n}\n\ninterface FileUploaderDropZoneProps {\n  className?: string;\n  disabled?: boolean;\n}\n\nfunction FileUploaderDropZone({ className, disabled }: FileUploaderDropZoneProps) {\n  const {\n    files,\n    maxFiles,\n    maxSize,\n    accept,\n    addFiles,\n    formatFileSize\n  } = useFileUploader();\n\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDrag = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      addFiles(e.dataTransfer.files);\n    }\n  }, [addFiles]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      addFiles(e.target.files);\n    }\n  }, [addFiles]);\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  const getReadableFileTypes = useCallback(() => {\n    return accept.map(type => {\n      if (type === 'image/*') return 'Images';\n      if (type === 'application/pdf') return 'PDF';\n      if (type === 'text/*') return 'Text files';\n      if (type === 'video/*') return 'Videos';\n      if (type === 'audio/*') return 'Audio';\n      return type;\n    });\n  }, [accept]);\n\n  const isDisabled = disabled || files.length >= maxFiles;\n\n  return (\n    <Card\n      className={cn(\n        \"relative border-2 border-dashed transition-colors duration-200 border-muted\",\n        dragActive && \"border-primary bg-primary/5\",\n        isDisabled && \"opacity-50 pointer-events-none\",\n        className\n      )}\n      onDragEnter={handleDrag}\n      onDragLeave={handleDrag}\n      onDragOver={handleDrag}\n      onDrop={handleDrop}\n    >\n      <CardContent className=\"flex flex-col items-center justify-center p-8 text-center\">\n        <div className={cn(\n          \"flex items-center justify-center w-16 h-16 rounded-full mb-4 transition-colors\",\n          dragActive\n            ? \"bg-primary text-primary-foreground\"\n            : \"bg-muted/50 text-muted-foreground\"\n        )}>\n          <Upload className=\"w-8 h-8\" />\n        </div>\n\n        <h3 className=\"text-lg font-semibold mb-2\">\n          {dragActive ? \"Drop files here\" : \"Upload Files\"}\n        </h3>\n\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Drag and drop files here or click to browse\n        </p>\n\n        <div className=\"flex flex-wrap gap-2 mb-4 justify-center\">\n          {getReadableFileTypes().map((type, index) => (\n            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n              {type}\n            </Badge>\n          ))}\n        </div>\n\n        <Button\n          onClick={openFileDialog}\n          variant=\"outline\"\n          className=\"transition-all duration-200 hover:bg-primary hover:text-primary-foreground\"\n          disabled={isDisabled}\n        >\n          Choose Files\n        </Button>\n\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Max {maxFiles} files, up to {formatFileSize(maxSize)} each\n        </p>\n      </CardContent>\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={accept.join(',')}\n        onChange={handleInputChange}\n        className=\"hidden\"\n      />\n    </Card>\n  );\n}\n\ninterface FileItemProps {\n  file: FileWithPreview;\n  enableCropping?: boolean;\n}\n\nfunction FileItem({ file, enableCropping }: FileItemProps) {\n  const { removeFile, formatFileSize } = useFileUploader();\n\n  return (\n    <Card className=\"relative overflow-hidden group\">\n      <div className={cn(\n        \"absolute inset-0 opacity-0 transition-opacity duration-200\",\n        file.error ? \"bg-destructive/5\" : \"bg-primary/5\"\n      )} />\n      <CardContent className=\"p-4 relative\">\n        <div className=\"flex items-center gap-3\">\n          <FileUploaderPreview file={file} />\n\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <p className=\"text-sm font-medium truncate\">\n                {file.name}\n              </p>\n              {file.status === 'complete' && !file.error && (\n                <Check className=\"w-4 h-4 text-green-500 shrink-0\" />\n              )}\n              {file.croppedPreview && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Cropped\n                </Badge>\n              )}\n            </div>\n\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              {formatFileSize(file.size)} • {file.type}\n            </p>\n\n            {file.error ? (\n              <p className=\"text-xs text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" /> {file.error}\n              </p>\n            ) : (\n              <FileUploaderProgress\n                value={file.progress}\n                className=\"h-1 rounded-full bg-secondary\"\n              />\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {enableCropping && file.preview && !file.error && (\n              <CropTrigger file={file} />\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => removeFile(file.id)}\n              className=\"shrink-0 h-8 w-8 rounded-full opacity-70 hover:opacity-100 hover:bg-destructive/10 hover:text-destructive\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface FileUploaderFileListProps {\n  className?: string;\n  showHeader?: boolean;\n  enableCropping?: boolean;\n}\n\nfunction FileUploaderFileList({\n  className,\n  showHeader = true,\n  enableCropping = false\n}: FileUploaderFileListProps) {\n  const {\n    files,\n    maxFiles,\n    clearAllFiles\n  } = useFileUploader();\n\n  if (files.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      {showHeader && (\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium\">\n            Uploaded Files ({files.length}/{maxFiles})\n          </h4>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearAllFiles}\n            className=\"text-xs hover:bg-destructive/10 hover:text-destructive\"\n          >\n            Clear All\n          </Button>\n        </div>\n      )}\n\n      {files.map((fileData) => (\n        <FileItem\n          key={fileData.id}\n          file={fileData}\n          enableCropping={enableCropping}\n        />\n      ))}\n    </div>\n  );\n}\n\ninterface FileUploaderCropProps {\n  aspectRatio?: number;\n  minWidth?: number;\n  minHeight?: number;\n}\n\nfunction FileUploaderCrop({\n  aspectRatio,\n  minWidth = 50,\n  minHeight = 50,\n}: FileUploaderCropProps) {\n  const {\n    updateFile,\n    cropDialogOpen,\n    setCropDialogOpen,\n    currentCropFile,\n    setCurrentCropFile\n  } = useFileUploader();\n  const [crop, setCrop] = useState<Crop>();\n  const [completedCrop, setCompletedCrop] = useState<Crop>();\n  const [imgRef, setImgRef] = useState<HTMLImageElement | null>(null);\n\n  const createCroppedImage = useCallback(async (\n    image: HTMLImageElement,\n    crop: Crop,\n    fileName: string\n  ): Promise<File> => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      throw new Error('No 2d context');\n    }\n\n    const pixelCrop = convertToPixelCrop(crop, image.naturalWidth, image.naturalHeight);\n\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n\n    ctx.drawImage(\n      image,\n      pixelCrop.x * scaleX,\n      pixelCrop.y * scaleY,\n      pixelCrop.width * scaleX,\n      pixelCrop.height * scaleY,\n      0,\n      0,\n      canvas.width,\n      canvas.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          reject(new Error('Failed to create blob'));\n          return;\n        }\n        const file = new globalThis.File([blob], fileName, {\n          type: 'image/png',\n          lastModified: Date.now()\n        });\n        resolve(file);\n      }, 'image/png', 1.0);\n    });\n  }, []);\n\n  const handleCropComplete = useCallback(async () => {\n    if (!completedCrop || !imgRef || !currentCropFile) return;\n\n    try {\n      const croppedFile = await createCroppedImage(\n        imgRef,\n        completedCrop,\n        currentCropFile.name\n      );\n\n      const croppedPreview = URL.createObjectURL(croppedFile);\n\n      updateFile(currentCropFile.id, {\n        file: croppedFile,\n        croppedPreview,\n        size: croppedFile.size,\n        originalFile: currentCropFile.originalFile || currentCropFile.file\n      });\n\n      setCropDialogOpen(false);\n      setCurrentCropFile(null);\n    } catch (error) {\n      console.error('Error cropping image:', error);\n    }\n  }, [completedCrop, imgRef, currentCropFile, createCroppedImage, updateFile, setCropDialogOpen, setCurrentCropFile]);\n\n  const handleCropCancel = useCallback(() => {\n    setCropDialogOpen(false);\n    setCurrentCropFile(null);\n    setCrop(undefined);\n    setCompletedCrop(undefined);\n  }, [setCropDialogOpen, setCurrentCropFile]);\n\n  const initializeCrop = useCallback((imageWidth: number, imageHeight: number) => {\n    const newCrop = centerCrop(\n      aspectRatio\n        ? makeAspectCrop(\n          {\n            unit: '%',\n            width: 90,\n          },\n          aspectRatio,\n          imageWidth,\n          imageHeight\n        )\n        : { x: 0, y: 0, width: 90, height: 90, unit: '%' },\n      imageWidth,\n      imageHeight,\n    );\n    setCrop(newCrop);\n    setCompletedCrop(newCrop);\n  }, [aspectRatio]);\n\n  return (\n    <Dialog open={cropDialogOpen} onOpenChange={setCropDialogOpen}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-sm font-medium\">\n            Crop Image\n          </DialogTitle>\n        </DialogHeader>\n        {currentCropFile && (\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-center\">\n              <ReactCrop\n                crop={crop}\n                onChange={(c) => setCrop(c)}\n                onComplete={(c) => setCompletedCrop(c)}\n                aspect={aspectRatio}\n                minWidth={minWidth}\n                minHeight={minHeight}\n                className=\"max-w-full\"\n              >\n                {/* eslint-disable-next-line @next/next/no-img-element */}\n                <img\n                  ref={setImgRef}\n                  src={currentCropFile.croppedPreview || currentCropFile.preview!}\n                  alt=\"Crop preview\"\n                  onLoad={(e) => {\n                    const { naturalWidth, naturalHeight } = e.currentTarget;\n                    initializeCrop(naturalWidth, naturalHeight);\n                  }}\n                  className=\"max-w-full max-h-[40vh] object-contain rounded\"\n                />\n              </ReactCrop>\n            </div>\n            <div className=\"flex justify-end gap-2 pt-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleCropCancel}>\n                Cancel\n              </Button>\n              <Button size=\"sm\" onClick={handleCropComplete} disabled={!completedCrop}>\n                Apply\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport interface FileUploaderProps {\n  onFilesReady?: (files: File[]) => void;\n  maxFiles?: number;\n  maxSize?: number;\n  accept?: string[];\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport function FileUploader({\n  onFilesReady,\n  maxFiles = 10,\n  maxSize = 10 * 1024 * 1024,\n  accept = ['image/*', 'application/pdf', 'text/*'],\n  className,\n  children\n}: FileUploaderProps) {\n  const [files, setFiles] = useState<FileWithPreview[]>([]);\n  const [cropDialogOpen, setCropDialogOpen] = useState(false);\n  const [currentCropFile, setCurrentCropFile] = useState<FileWithPreview | null>(null);\n\n  useEffect(() => {\n    return () => {\n      files.forEach(file => {\n        if (file.preview) URL.revokeObjectURL(file.preview);\n        if (file.croppedPreview) URL.revokeObjectURL(file.croppedPreview);\n      });\n    };\n  }, [files]);\n\n  const getFileIcon = useCallback((file: File) => {\n    if (file.type.startsWith('image/')) return <ImageIcon className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type.startsWith('video/')) return <FileVideo className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type.startsWith('audio/')) return <FileAudio className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type === 'application/pdf') return <FileText className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    return <File className=\"w-4 h-4\" aria-hidden=\"true\" />;\n  }, []);\n\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }, []);\n\n  const validateFile = useCallback((file: File) => {\n    if (file.size > maxSize) {\n      return `File size exceeds ${formatFileSize(maxSize)}`;\n    }\n\n    const fileType = file.type;\n    const isAccepted = accept.some(type => {\n      if (type.endsWith('/*')) {\n        return fileType.startsWith(type.slice(0, -1));\n      }\n      return fileType === type;\n    });\n\n    if (!isAccepted) {\n      return 'File type not supported';\n    }\n\n    return null;\n  }, [maxSize, accept, formatFileSize]);\n\n  const addFiles = useCallback((newFiles: FileList) => {\n    if (files.length >= maxFiles) return;\n\n    const filesToAdd = Array.from(newFiles).slice(0, maxFiles - files.length);\n\n    const processedFiles = filesToAdd.map(file => {\n      const error = validateFile(file);\n      const isImage = file.type.startsWith('image/');\n\n      return {\n        id: Math.random().toString(36).substring(2, 11),\n        file,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        progress: error ? 0 : 100,\n        status: error ? 'error' : 'complete',\n        error,\n        preview: isImage ? URL.createObjectURL(file) : null\n      } as FileWithPreview;\n    });\n\n    const newFileList = [...files, ...processedFiles];\n    setFiles(newFileList);\n\n    const validFiles = newFileList.filter(f => !f.error).map(f => f.file);\n    if (onFilesReady) {\n      onFilesReady(validFiles);\n    }\n  }, [files, maxFiles, validateFile, onFilesReady]);\n\n  const removeFile = useCallback((fileId: string) => {\n    setFiles(prevFiles => {\n      const fileToRemove = prevFiles.find(f => f.id === fileId);\n      if (fileToRemove?.preview) {\n        URL.revokeObjectURL(fileToRemove.preview);\n      }\n      if (fileToRemove?.croppedPreview) {\n        URL.revokeObjectURL(fileToRemove.croppedPreview);\n      }\n\n      const updatedFiles = prevFiles.filter(f => f.id !== fileId);\n\n      if (onFilesReady) {\n        const validFiles = updatedFiles.filter(f => !f.error).map(f => f.file);\n        onFilesReady(validFiles);\n      }\n\n      return updatedFiles;\n    });\n  }, [onFilesReady]);\n\n  const clearAllFiles = useCallback(() => {\n    files.forEach(file => {\n      if (file.preview) URL.revokeObjectURL(file.preview);\n      if (file.croppedPreview) URL.revokeObjectURL(file.croppedPreview);\n    });\n\n    setFiles([]);\n    if (onFilesReady) {\n      onFilesReady([]);\n    }\n  }, [files, onFilesReady]);\n\n  const updateFile = useCallback((fileId: string, updates: Partial<FileWithPreview>) => {\n    setFiles(prevFiles => {\n      const updatedFiles = prevFiles.map(f =>\n        f.id === fileId ? { ...f, ...updates } : f\n      );\n\n      if (onFilesReady) {\n        const validFiles = updatedFiles.filter(f => !f.error).map(f => f.file);\n        onFilesReady(validFiles);\n      }\n\n      return updatedFiles;\n    });\n  }, [onFilesReady]);\n\n  const openCropDialog = useCallback((file: FileWithPreview) => {\n    setCurrentCropFile(file);\n    setCropDialogOpen(true);\n  }, []);\n\n  const contextValue: FileUploaderContextType = {\n    files,\n    maxFiles,\n    maxSize,\n    accept,\n    onFilesReady,\n    addFiles,\n    removeFile,\n    clearAllFiles,\n    updateFile,\n    formatFileSize,\n    validateFile,\n    getFileIcon,\n    openCropDialog,\n    cropDialogOpen,\n    setCropDialogOpen,\n    currentCropFile,\n    setCurrentCropFile,\n  };\n\n  return (\n    <FileUploaderContext.Provider value={contextValue}>\n      <div className={cn(\"w-full space-y-4\", className)}>\n        {children}\n      </div>\n    </FileUploaderContext.Provider>\n  );\n}\n\nFileUploader.DropZone = FileUploaderDropZone;\nFileUploader.FileList = FileUploaderFileList;\nFileUploader.Crop = FileUploaderCrop;\nFileUploader.Progress = FileUploaderProgress;\nFileUploader.Preview = FileUploaderPreview;\n\nexport { FileUploaderDropZone, FileUploaderFileList, FileUploaderCrop, FileUploaderProgress, FileUploaderPreview };\n",
      "type": "registry:component"
    }
  ]
}
