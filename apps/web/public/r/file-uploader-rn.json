{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-uploader-rn",
  "type": "registry:component",
  "title": "File Uploader",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A file uploader component for react native",
  "dependencies": [
    "expo-document-picker",
    "@react-native-vector-icons/ant-design"
  ],
  "registryDependencies": [
    "https://reactnativereusables.com/r/new-york/card.json",
    "https://reactnativereusables.com/r/new-york/button.json",
    "https://reactnativereusables.com/r/new-york/badge.json"
  ],
  "files": [
    {
      "path": "r/new-york/file-uploader/file-uploader-rn.tsx",
      "content": "import React, { useState, useCallback, useEffect, createContext, useContext } from 'react';\nimport { View, Text, Alert } from 'react-native';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport * as DocumentPicker from 'expo-document-picker';\nimport { AntDesign } from \"@react-native-vector-icons/ant-design\";\n\nexport interface FileWithPreview {\n  id: string;\n  file: DocumentPicker.DocumentPickerAsset;\n  name: string;\n  size: number;\n  type: string;\n  progress: number;\n  status: 'uploading' | 'complete' | 'error';\n  error?: string | null;\n  preview?: string | null;\n}\n\ninterface FileUploaderContextType {\n  files: FileWithPreview[];\n  maxFiles: number;\n  maxSize: number;\n  accept: string[];\n  onFilesReady?: (files: DocumentPicker.DocumentPickerAsset[]) => void;\n  addFiles: (files: DocumentPicker.DocumentPickerAsset[]) => void;\n  removeFile: (fileId: string) => void;\n  clearAllFiles: () => void;\n  updateFile: (fileId: string, updates: Partial<FileWithPreview>) => void;\n  formatFileSize: (bytes: number) => string;\n  validateFile: (file: DocumentPicker.DocumentPickerAsset) => string | null;\n  getFileIcon: (file: DocumentPicker.DocumentPickerAsset) => React.ReactNode;\n}\n\nconst FileUploaderContext = createContext<FileUploaderContextType | null>(null);\n\nconst useFileUploader = () => {\n  const context = useContext(FileUploaderContext);\n  if (!context) {\n    throw new Error('FileUploader components must be used within a FileUploader');\n  }\n  return context;\n};\n\nconst FileUploaderProgress = React.forwardRef<\n  View,\n  React.ComponentProps<typeof View> & { value?: number }\n>(({ className, value = 0, ...props }, ref) => (\n  <View\n    ref={ref}\n    className={cn(\"relative w-full overflow-hidden rounded-full bg-secondary h-1\", className)}\n    {...props}\n  >\n    <View\n      className=\"h-full bg-primary transition-all duration-300 ease-in-out\"\n      style={{ width: `${value}%` }}\n    />\n  </View>\n));\nFileUploaderProgress.displayName = \"FileUploaderProgress\";\n\ninterface FileUploaderPreviewProps {\n  file: FileWithPreview;\n  className?: string;\n}\n\nfunction FileUploaderPreview({ file, className }: FileUploaderPreviewProps) {\n  const { getFileIcon } = useFileUploader();\n\n  return (\n    <View className={cn(\"w-12 h-12 bg-muted rounded-md flex items-center justify-center shrink-0 border\", className)}>\n      {file.error ? (\n        <AntDesign name=\"exclamation-circle\" size={24} />\n      ) : (\n        getFileIcon(file.file)\n      )}\n    </View>\n  );\n}\n\ninterface FileUploaderDropZoneProps {\n  className?: string;\n  disabled?: boolean;\n}\n\nfunction FileUploaderDropZone({ className, disabled }: FileUploaderDropZoneProps) {\n  const {\n    files,\n    maxFiles,\n    maxSize,\n    accept,\n    addFiles,\n    formatFileSize\n  } = useFileUploader();\n\n  const handlePickDocument = async () => {\n    try {\n      const result = await DocumentPicker.getDocumentAsync({\n        type: accept.length > 0 ? accept : '*/*',\n        multiple: true,\n        copyToCacheDirectory: true,\n      });\n\n      if (!result.canceled) {\n        addFiles(result.assets);\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to pick files');\n    }\n  };\n\n  const getReadableFileTypes = useCallback(() => {\n    return accept.map(type => {\n      if (type === 'image/*') return 'Images';\n      if (type === 'application/pdf') return 'PDF';\n      if (type === 'text/*') return 'Text files';\n      if (type === 'video/*') return 'Videos';\n      if (type === 'audio/*') return 'Audio';\n      return type;\n    });\n  }, [accept]);\n\n  const isDisabled = disabled || files.length >= maxFiles;\n\n  return (\n    <Card\n      className={cn(\n        \"relative border-2 border-dashed border-muted\",\n        isDisabled && \"opacity-50\",\n        className\n      )}\n    >\n      <CardContent className=\"flex flex-col items-center justify-center p-8\">\n        <View className=\"flex items-center justify-center w-16 h-16 rounded-full mb-4 bg-muted/50\">\n          <AntDesign name='cloud-upload' size={32} />\n        </View>\n\n        <Text className=\"text-lg font-semibold mb-2 text-foreground\">\n          Upload Files\n        </Text>\n\n        <Text className=\"text-sm text-muted-foreground mb-4 text-center\">\n          Tap to browse and select files\n        </Text>\n\n        <View className=\"flex flex-row flex-wrap gap-2 mb-4 justify-center\">\n          {getReadableFileTypes().map((type, index) => (\n            <Badge key={index} variant=\"secondary\">\n              <Text className='text-xs'>\n                {type}\n              </Text>\n            </Badge>\n          ))}\n        </View>\n\n        <Button\n          onPress={handlePickDocument}\n          variant=\"outline\"\n          disabled={isDisabled}\n        >\n          <Text>\n            Choose Files\n          </Text>\n        </Button>\n\n        <Text className=\"text-xs text-muted-foreground mt-2 text-center\">\n          Max {maxFiles} files, up to {formatFileSize(maxSize)} each\n        </Text>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface FileItemProps {\n  file: FileWithPreview;\n}\n\nfunction FileItem({ file }: FileItemProps) {\n  const { removeFile, formatFileSize } = useFileUploader();\n\n  return (\n    <Card className=\"relative overflow-hidden\">\n      <View className={cn(\n        \"absolute inset-0 opacity-0\",\n        file.error ? \"bg-destructive/5\" : \"bg-primary/5\"\n      )} />\n      <CardContent className=\"p-4 relative\">\n        <View className=\"flex flex-row items-center gap-3\">\n          <FileUploaderPreview file={file} />\n\n          <View className=\"flex-1 min-w-0\">\n            <View className=\"flex flex-row items-center gap-2 mb-1\">\n              <Text className=\"text-sm font-medium text-foreground flex-1\" numberOfLines={1}>\n                {file.name}\n              </Text>\n              {file.status === 'complete' && !file.error && (\n                <AntDesign name='check' size={16} />\n              )}\n            </View>\n\n            <Text className=\"text-xs text-muted-foreground mb-2\">\n              {formatFileSize(file.size)} â€¢ {file.type}\n            </Text>\n\n            {file.error ? (\n              <View className=\"flex flex-row items-center gap-1\">\n                <AntDesign name=\"exclamation-circle\" size={12} />\n                <Text className=\"text-xs text-destructive\">{file.error}</Text>\n              </View>\n            ) : (\n              <FileUploaderProgress\n                value={file.progress}\n                className=\"h-1 rounded-full bg-secondary\"\n              />\n            )}\n          </View>\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onPress={() => removeFile(file.id)}\n            className=\"shrink-0 h-8 w-8 rounded-full opacity-70\"\n          >\n            <AntDesign name='close' size={16} />\n          </Button>\n        </View>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface FileUploaderFileListProps {\n  className?: string;\n  showHeader?: boolean;\n}\n\nfunction FileUploaderFileList({\n  className,\n  showHeader = true,\n}: FileUploaderFileListProps) {\n  const {\n    files,\n    maxFiles,\n    clearAllFiles\n  } = useFileUploader();\n\n  if (files.length === 0) {\n    return null;\n  }\n\n  return (\n    <View className={cn(\"gap-3\", className)}>\n      {showHeader && (\n        <View className=\"flex flex-row items-center justify-between\">\n          <Text className=\"text-sm font-medium text-foreground\">\n            Uploaded Files ({files.length}/{maxFiles})\n          </Text>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onPress={clearAllFiles}\n            className=\"text-xs\"\n          >\n            <Text>\n              Clear All\n            </Text>\n          </Button>\n        </View>\n      )}\n\n      {files.map((fileData) => (\n        <FileItem\n          key={fileData.id}\n          file={fileData}\n        />\n      ))}\n    </View>\n  );\n}\n\nexport interface FileUploaderProps {\n  onFilesReady?: (files: DocumentPicker.DocumentPickerAsset[]) => void;\n  maxFiles?: number;\n  maxSize?: number;\n  accept?: string[];\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport function FileUploader({\n  onFilesReady,\n  maxFiles = 10,\n  maxSize = 10 * 1024 * 1024,\n  accept = ['image/*', 'application/pdf', 'text/*'],\n  className,\n  children\n}: FileUploaderProps) {\n  const [files, setFiles] = useState<FileWithPreview[]>([]);\n\n  useEffect(() => {\n    return () => {\n      files.forEach(file => {\n        if (file.preview) {\n        }\n      });\n    };\n  }, [files]);\n\n  const getFileIcon = useCallback((file: DocumentPicker.DocumentPickerAsset) => {\n    if (file.mimeType?.startsWith('image/')) return <AntDesign name=\"file-image\" size={24} />;\n    return <AntDesign name=\"folder-open\" size={24} />;\n  }, []);\n\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }, []);\n\n  const validateFile = useCallback((file: DocumentPicker.DocumentPickerAsset) => {\n    if (file.size && file.size > maxSize) {\n      return `File size exceeds ${formatFileSize(maxSize)}`;\n    }\n\n    const fileType = file.mimeType || '';\n    const isAccepted = accept.some(type => {\n      if (type.endsWith('/*')) {\n        return fileType.startsWith(type.slice(0, -1));\n      }\n      return fileType === type;\n    });\n\n    if (!isAccepted && accept.length > 0) {\n      return 'File type not supported';\n    }\n\n    return null;\n  }, [maxSize, accept, formatFileSize]);\n\n  const addFiles = useCallback((newFiles: DocumentPicker.DocumentPickerAsset[]) => {\n    if (files.length >= maxFiles) return;\n\n    const filesToAdd = newFiles.slice(0, maxFiles - files.length);\n\n    const processedFiles = filesToAdd.map(file => {\n      const error = validateFile(file);\n\n      return {\n        id: Math.random().toString(36).substring(2, 11),\n        file,\n        name: file.name,\n        size: file.size || 0,\n        type: file.mimeType || 'unknown',\n        progress: error ? 0 : 100,\n        status: error ? 'error' : 'complete',\n        error,\n        preview: file.mimeType?.startsWith('image/') ? file.uri : null\n      } as FileWithPreview;\n    });\n\n    const newFileList = [...files, ...processedFiles];\n    setFiles(newFileList);\n\n    const validFiles = newFileList.filter(f => !f.error).map(f => f.file);\n    if (onFilesReady) {\n      onFilesReady(validFiles);\n    }\n  }, [files, maxFiles, validateFile, onFilesReady]);\n\n  const removeFile = useCallback((fileId: string) => {\n    setFiles(prevFiles => {\n      const updatedFiles = prevFiles.filter(f => f.id !== fileId);\n\n      if (onFilesReady) {\n        const validFiles = updatedFiles.filter(f => !f.error).map(f => f.file);\n        onFilesReady(validFiles);\n      }\n\n      return updatedFiles;\n    });\n  }, [onFilesReady]);\n\n  const clearAllFiles = useCallback(() => {\n    setFiles([]);\n    if (onFilesReady) {\n      onFilesReady([]);\n    }\n  }, [onFilesReady]);\n\n  const updateFile = useCallback((fileId: string, updates: Partial<FileWithPreview>) => {\n    setFiles(prevFiles => {\n      const updatedFiles = prevFiles.map(f =>\n        f.id === fileId ? { ...f, ...updates } : f\n      );\n\n      if (onFilesReady) {\n        const validFiles = updatedFiles.filter(f => !f.error).map(f => f.file);\n        onFilesReady(validFiles);\n      }\n\n      return updatedFiles;\n    });\n  }, [onFilesReady]);\n\n  const contextValue: FileUploaderContextType = {\n    files,\n    maxFiles,\n    maxSize,\n    accept,\n    onFilesReady,\n    addFiles,\n    removeFile,\n    clearAllFiles,\n    updateFile,\n    formatFileSize,\n    validateFile,\n    getFileIcon,\n  };\n\n  return (\n    <FileUploaderContext.Provider value={contextValue}>\n      <View className={cn(\"w-full gap-4\", className)}>\n        {children}\n      </View>\n    </FileUploaderContext.Provider>\n  );\n}\n\nFileUploader.DropZone = FileUploaderDropZone;\nFileUploader.FileList = FileUploaderFileList;\nFileUploader.Progress = FileUploaderProgress;\nFileUploader.Preview = FileUploaderPreview;\n\nexport { FileUploaderDropZone, FileUploaderFileList, FileUploaderProgress, FileUploaderPreview };\n",
      "type": "registry:component"
    }
  ]
}