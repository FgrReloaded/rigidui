{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "draggable-dashboard",
  "type": "registry:component",
  "title": "Draggable Dashboard",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A draggable dashboard component",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities"
  ],
  "registryDependencies": [
    "switch",
    "label",
    "separator"
  ],
  "files": [
    {
      "path": "registry/new-york/draggable-dashboard/draggable-dashboard.tsx",
      "content": "\"use client\"\n\nimport React, { useState, ReactNode, Children, isValidElement, useEffect, useCallback } from 'react'\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n  DragOverlay,\n  DragStartEvent,\n} from '@dnd-kit/core'\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  rectSortingStrategy,\n} from '@dnd-kit/sortable'\nimport {\n  useSortable,\n} from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { Switch } from '@/components/ui/switch'\nimport { Label } from '@/components/ui/label'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  GripVertical,\n  Lock,\n  Unlock,\n} from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface DraggableWrapperProps {\n  id: string\n  children: ReactNode\n  gridSize?: {\n    cols: number\n    rows: number\n  }\n  className?: string\n  isLocked?: boolean\n  showHandle?: boolean\n}\n\ninterface DraggableDashboardProps {\n  children: ReactNode\n  className?: string\n  showLockToggle?: boolean\n  showHandles?: boolean\n  gridCols?: number\n  gap?: number\n  defaultLocked?: boolean\n  onOrderChange?: (newOrder: string[]) => void\n  persistenceKey?: string\n}\n\nexport function DraggableWrapper({\n  id,\n  children,\n  gridSize = { cols: 1, rows: 1 },\n  className,\n  isLocked = false,\n  showHandle = true,\n}: DraggableWrapperProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({\n    id,\n    disabled: isLocked\n  })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    gridColumn: `span ${gridSize.cols}`,\n    gridRow: `span ${gridSize.rows}`,\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        \"group relative\",\n        isDragging && \"opacity-50 z-50\",\n        className\n      )}\n    >\n      {!isLocked && showHandle && (\n        <div\n          {...attributes}\n          {...listeners}\n          className={cn(\n            \"absolute top-2 right-2 z-10 cursor-grab hover:cursor-grabbing\",\n            \"p-1 bg-background/80 backdrop-blur-xs rounded shadow-xs\",\n            \"opacity-0 group-hover:opacity-100 transition-opacity\",\n            \"hover:bg-muted\"\n          )}\n          title=\"Drag to move\"\n        >\n          <GripVertical className=\"h-4 w-4 text-muted-foreground\" />\n        </div>\n      )}\n\n      {isLocked && showHandle && (\n        <div\n          className={cn(\n            \"absolute top-2 right-2 z-10 cursor-grab hover:cursor-grabbing\",\n            \"p-1 bg-background/80 backdrop-blur-xs rounded shadow-xs\",\n            \"opacity-0 group-hover:opacity-100 transition-opacity\",\n            \"hover:bg-muted\"\n          )}\n          title=\"Locked\"\n        >\n          <Lock className=\"h-4 w-4 text-muted-foreground\" />\n        </div>\n      )}\n\n      <div className={cn(\n        \"h-full transition-all duration-200\",\n        !isLocked && \"hover:shadow-lg\",\n        isDragging && \"shadow-2xl\"\n      )}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction DragOverlayWrapper({ children }: { children: ReactNode }) {\n  return (\n    <div className=\"shadow-2xl\">\n      {children}\n    </div>\n  )\n}\n\nexport default function DraggableDashboard({\n  children,\n  className,\n  showLockToggle = true,\n  showHandles = true,\n  gridCols = 3,\n  gap = 6,\n  defaultLocked = false,\n  onOrderChange,\n  persistenceKey = 'draggable-dashboard-order'\n}: DraggableDashboardProps) {\n  const [isLocked, setIsLocked] = useState(defaultLocked)\n  const [activeId, setActiveId] = useState<string | null>(null)\n\n  const childrenArray = Children.toArray(children)\n\n  const getInitialOrder = (): string[] => {\n    return childrenArray\n      .map((child, index) => {\n        if (isValidElement(child) && child.props && typeof child.props === 'object' && 'id' in child.props) {\n          return child.props.id as string\n        }\n        return `item-${index}`\n      })\n  }\n\n  const loadPersistedOrder = useCallback((): string[] => {\n    if (typeof window === 'undefined') return getInitialOrder()\n\n    try {\n      const savedOrder = localStorage.getItem(persistenceKey)\n      if (savedOrder) {\n        const parsedOrder = JSON.parse(savedOrder)\n        const initialOrder = getInitialOrder()\n\n        const isValidOrder = parsedOrder.length === initialOrder.length &&\n          parsedOrder.every((id: string) => initialOrder.includes(id)) &&\n          initialOrder.every((id: string) => parsedOrder.includes(id))\n\n        if (isValidOrder) {\n          return parsedOrder\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load persisted dashboard order:', error)\n    }\n\n    return getInitialOrder()\n  }, [persistenceKey])\n\n  const [itemOrder, setItemOrder] = useState<string[]>(getInitialOrder)\n\n  useEffect(() => {\n    const persistedOrder = loadPersistedOrder()\n    setItemOrder(persistedOrder)\n  }, [loadPersistedOrder, persistenceKey])\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem(persistenceKey, JSON.stringify(itemOrder))\n      } catch (error) {\n        console.warn('Failed to save dashboard order:', error)\n      }\n    }\n  }, [itemOrder, persistenceKey])\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  )\n\n  function handleDragStart(event: DragStartEvent) {\n    if (isLocked) return\n    setActiveId(event.active.id as string)\n  }\n\n  function handleDragEnd(event: DragEndEvent) {\n    const { active, over } = event\n\n    if (active.id !== over?.id && over?.id) {\n      setItemOrder((items) => {\n        const oldIndex = items.findIndex((item) => item === active.id)\n        const newIndex = items.findIndex((item) => item === over.id)\n\n        const newOrder = arrayMove(items, oldIndex, newIndex)\n\n        if (onOrderChange) {\n          onOrderChange(newOrder)\n        }\n\n        return newOrder\n      })\n    }\n\n    setActiveId(null)\n  }\n\n  const orderedChildren = itemOrder.map(id => {\n    return childrenArray.find((child, index) => {\n      if (isValidElement(child) && child.props && typeof child.props === 'object' && 'id' in child.props) {\n        return child.props.id === id\n      }\n      return `item-${index}` === id\n    })\n  }).filter(Boolean)\n\n  const activeChild = childrenArray.find((child, index) => {\n    if (isValidElement(child) && child.props && typeof child.props === 'object' && 'id' in child.props) {\n      return child.props.id === activeId\n    }\n    return `item-${index}` === activeId\n  })\n\n  const toggleLock = () => {\n    setIsLocked(!isLocked)\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {(showLockToggle) && (\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold tracking-tight\">Dashboard</h2>\n            <p className=\"text-muted-foreground\">\n              {isLocked ? \"Dashboard is locked\" : \"Drag items to customize your layout\"}\n            </p>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            {showLockToggle && (\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"lock-toggle\" className=\"text-sm font-medium\">\n                  {isLocked ? \"Locked\" : \"Unlocked\"}\n                </Label>\n                <Switch\n                  id=\"lock-toggle\"\n                  checked={isLocked}\n                  onCheckedChange={toggleLock}\n                />\n                {isLocked ? (\n                  <Lock className=\"h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Unlock className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <Separator />\n\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext\n          items={itemOrder}\n          strategy={rectSortingStrategy}\n        >\n          <div\n            className={cn(\n              \"grid auto-rows-min\",\n              `grid-cols-1 md:grid-cols-2 lg:grid-cols-${gridCols}`\n            )}\n            style={{\n              gridTemplateColumns: `repeat(${gridCols}, minmax(0, 1fr))`,\n              gap: `${gap * 0.25}rem`\n            }}\n          >\n            {orderedChildren.map((child, index) => {\n              if (!isValidElement(child)) return null\n\n              const childProps = child.props && typeof child.props === 'object' ? child.props : {}\n              const id = ('id' in childProps ? childProps.id : `item-${index}`) as string\n\n              return React.createElement(child.type, {\n                ...(child.props || {}),\n                key: id,\n                isLocked,\n                showHandle: showHandles,\n              })\n            })}\n          </div>\n        </SortableContext>\n\n        <DragOverlay>\n          {activeChild && isValidElement(activeChild) ? (\n            <DragOverlayWrapper>\n              {React.createElement(activeChild.type, {\n                ...(activeChild.props || {}),\n                isLocked: true,\n                showHandle: false,\n                key: 'overlay'\n              })}\n            </DragOverlayWrapper>\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}