{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-explorer",
  "type": "registry:component",
  "title": "File Explorer",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A file system explorer component with code preview",
  "dependencies": [
    "react-syntax-highlighter",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input"
  ],
  "files": [
    {
      "path": "r/new-york/file-explorer/file-explorer.tsx",
      "content": "\"use client\"\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport { ChevronDown, ChevronRight, Folder, FolderOpen, FileText, X, Copy, Check, ChevronsUp, Search, Image, AlertTriangle, RefreshCw } from 'lucide-react'\nimport { Card } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { atomOneDark } from 'react-syntax-highlighter/dist/esm/styles/hljs'\nimport { cn } from '@/lib/utils'\n\ntype FileType = {\n  id: string\n  name: string\n  type: 'file'\n  language?: string\n  content: string\n  icon?: React.ReactNode\n  isImage?: boolean\n  imageUrl?: string\n}\n\ntype FolderType = {\n  id: string\n  name: string\n  type: 'folder'\n  children: (FileType | FolderType)[]\n  expanded?: boolean\n  icon?: React.ReactNode\n  expandedIcon?: React.ReactNode\n}\n\ntype FileSystemItemType = FileType | FolderType\n\nclass FileExplorerErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-64 text-center p-6\">\n          <AlertTriangle className=\"h-16 w-16 mb-4 text-destructive\" />\n          <h3 className=\"text-xl font-medium mb-2\">Something went wrong</h3>\n          <p className=\"text-muted-foreground\">\n            Unable to load file explorer. Please try refreshing the page.\n          </p>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\ninterface FileExplorerProps {\n  initialData?: FolderType\n  className?: string\n  cardClassName?: string\n  title?: string\n  showTitle?: boolean\n  height?: string\n  fileContentHeight?: string\n  defaultFileIcon?: React.ReactNode\n  defaultFolderIcon?: React.ReactNode\n  defaultFolderOpenIcon?: React.ReactNode\n  onFileSelect?: (file: FileType) => void\n  onFolderToggle?: (folderId: string, isExpanded: boolean) => void\n  readOnly?: boolean\n  allowedFileTypes?: string[]\n  maxFileSize?: number\n  loading?: boolean\n  onRefresh?: () => void\n}\n\nconst defaultFileSystemData: FolderType = {\n  id: 'root',\n  name: 'project-root',\n  type: 'folder',\n  expanded: true,\n  children: [\n    {\n      id: 'src',\n      name: 'src',\n      type: 'folder',\n      expanded: true,\n      children: [\n        {\n          id: 'components',\n          name: 'components',\n          type: 'folder',\n          children: [\n            {\n              id: 'Button.tsx',\n              name: 'Button.tsx',\n              type: 'file',\n              language: 'tsx',\n              content: `import React from 'react';\ninterface ButtonProps {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary' | 'outline-solid';\n  size?: 'sm' | 'md' | 'lg';\n  onClick?: () => void;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  onClick,\n}) => {\n  return (\n    <button\n      className={\\`button \\${variant} \\${size}\\`}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};`\n            },\n            {\n              id: 'Card.tsx',\n              name: 'Card.tsx',\n              type: 'file',\n              language: 'tsx',\n              content: `import React from 'react';\n\ninterface CardProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  title,\n  children,\n}) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"card-body\">\n        {children}\n      </div>\n    </div>\n  );\n};`\n            }\n          ]\n        },\n        {\n          id: 'pages',\n          name: 'pages',\n          type: 'folder',\n          children: [\n            {\n              id: 'index.tsx',\n              name: 'index.tsx',\n              type: 'file',\n              language: 'tsx',\n              content: `import React from 'react';\nimport { Button } from '../components/Button';\nimport { Card } from '../components/Card';\n\nexport default function HomePage() {\n  return (\n    <div className=\"container\">\n      <h1>Welcome to My App</h1>\n      <Card title=\"Getting Started\">\n        <p>This is a simple example of using our components.</p>\n        <Button>Click Me</Button>\n      </Card>\n    </div>\n  );\n}`\n            }\n          ]\n        },\n        {\n          id: 'assets',\n          name: 'assets',\n          type: 'folder',\n          children: [\n            {\n              id: 'logo.png',\n              name: 'logo.png',\n              type: 'file',\n              isImage: true,\n              imageUrl: 'https://via.placeholder.com/300x200/3B82F6/FFFFFF?text=Logo',\n              content: 'Binary image data'\n            },\n            {\n              id: 'hero.jpg',\n              name: 'hero.jpg',\n              type: 'file',\n              isImage: true,\n              imageUrl: 'https://via.placeholder.com/600x400/10B981/FFFFFF?text=Hero+Image',\n              content: 'Binary image data'\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\nconst isImageFile = (filename: string): boolean => {\n  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg', '.ico']\n  return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext))\n}\n\nconst getFileIcon = (file: FileType, defaultFileIcon: React.ReactNode): React.ReactNode => {\n  if (file.icon) return file.icon\n  if (file.isImage || isImageFile(file.name)) {\n    // eslint-disable-next-line jsx-a11y/alt-text\n    return <Image className=\"h-4 w-4 text-blue-500\" />\n  }\n  return defaultFileIcon\n}\n\nconst FileTreeItem = ({\n  item,\n  level = 0,\n  onToggleExpand,\n  onSelectFile,\n  selectedFileId,\n  defaultFileIcon,\n  defaultFolderIcon,\n  defaultFolderOpenIcon\n}: {\n  item: FileSystemItemType\n  level?: number\n  onToggleExpand: (id: string) => void\n  onSelectFile: (file: FileType) => void\n  selectedFileId: string | null\n  defaultFileIcon: React.ReactNode\n  defaultFolderIcon: React.ReactNode\n  defaultFolderOpenIcon: React.ReactNode\n}) => {\n  const indent = level * 16\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent, action: () => void) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault()\n      action()\n    }\n    if (e.key === 'ArrowRight' && item.type === 'folder' && !(item as FolderType).expanded) {\n      onToggleExpand(item.id)\n    }\n    if (e.key === 'ArrowLeft' && item.type === 'folder' && (item as FolderType).expanded) {\n      onToggleExpand(item.id)\n    }\n  }, [item, onToggleExpand])\n\n  if (item.type === 'folder') {\n    const folderIcon = item.expanded\n      ? (item.expandedIcon || defaultFolderOpenIcon)\n      : (item.icon || defaultFolderIcon);\n\n    return (\n      <>\n        <div\n          className={cn(\n            \"flex items-center py-1 mb-1 px-2 rounded-md cursor-pointer hover:bg-accent/50 transition-colors\",\n            { \"bg-accent/30\": item.expanded }\n          )}\n          style={{ paddingLeft: `${indent}px` }}\n          onClick={() => onToggleExpand(item.id)}\n          onKeyDown={(e) => handleKeyDown(e, () => onToggleExpand(item.id))}\n          tabIndex={0}\n          role=\"treeitem\"\n          aria-expanded={item.expanded}\n          aria-selected={false}\n          aria-label={`${item.name} folder, ${item.expanded ? 'expanded' : 'collapsed'}`}\n        >\n          {item.expanded ?\n            <ChevronDown className=\"h-4 w-4 mr-1 text-muted-foreground\" /> :\n            <ChevronRight className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n          }\n          <span className=\"mr-1\">\n            {folderIcon}\n          </span>\n          <span className=\"text-sm\">{item.name}</span>\n        </div>\n\n        {item.expanded && item.children.map((child) => (\n          <FileTreeItem\n            key={child.id}\n            item={child}\n            level={level + 1}\n            onToggleExpand={onToggleExpand}\n            onSelectFile={onSelectFile}\n            selectedFileId={selectedFileId}\n            defaultFileIcon={defaultFileIcon}\n            defaultFolderIcon={defaultFolderIcon}\n            defaultFolderOpenIcon={defaultFolderOpenIcon}\n          />\n        ))}\n      </>\n    )\n  } else {\n    const fileIcon = getFileIcon(item as FileType, defaultFileIcon);\n\n    return (\n      <div\n        className={cn(\n          \"flex items-center py-1 px-2 rounded-md cursor-pointer hover:bg-accent/50 transition-colors\",\n          { \"bg-primary/10 text-primary\": selectedFileId === item.id }\n        )}\n        style={{ paddingLeft: `${indent + 20}px` }}\n        onClick={() => onSelectFile(item as FileType)}\n        onKeyDown={(e) => handleKeyDown(e, () => onSelectFile(item as FileType))}\n        tabIndex={0}\n        role=\"treeitem\"\n        aria-label={`${item.name} file`}\n        aria-selected={selectedFileId === item.id}\n      >\n        <span className=\"mr-2\">{fileIcon}</span>\n        <span className=\"text-sm\">{item.name}</span>\n      </div>\n    )\n  }\n}\n\nexport function FileExplorer({\n  initialData = defaultFileSystemData,\n  className = \"\",\n  cardClassName = \"\",\n  title = \"File Explorer\",\n  showTitle = true,\n  height = \"calc(100vh-200px)\",\n  fileContentHeight = \"100%\",\n  defaultFileIcon = <FileText className=\"h-4 w-4 text-muted-foreground\" />,\n  defaultFolderIcon = <Folder className=\"h-4 w-4 text-yellow-500\" />,\n  defaultFolderOpenIcon = <FolderOpen className=\"h-4 w-4 text-yellow-500\" />,\n  onFileSelect,\n  onFolderToggle,\n  loading = false,\n  onRefresh\n}: FileExplorerProps) {\n  const [fileSystem, setFileSystem] = useState<FolderType>(initialData)\n  const [selectedFile, setSelectedFile] = useState<FileType | null>(null)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [copied, setCopied] = useState(false)\n\n  useEffect(() => {\n    setFileSystem(initialData)\n  }, [initialData])\n\n  const handleToggleExpand = useCallback((id: string) => {\n    const toggleFolder = (items: FileSystemItemType[]): FileSystemItemType[] => {\n      return items.map(item => {\n        if (item.id === id && item.type === 'folder') {\n          const newExpanded = !(item as FolderType).expanded\n          onFolderToggle?.(id, newExpanded)\n          return { ...item, expanded: newExpanded }\n        }\n        if (item.type === 'folder') {\n          return { ...item, children: toggleFolder((item as FolderType).children) }\n        }\n        return item\n      })\n    }\n\n    setFileSystem(prevState => ({\n      ...prevState,\n      children: toggleFolder(prevState.children)\n    }))\n  }, [onFolderToggle])\n\n  const handleSelectFile = useCallback((file: FileType) => {\n    setSelectedFile(file)\n    onFileSelect?.(file)\n  }, [onFileSelect])\n\n  const handleCopyContent = useCallback(async () => {\n    if (selectedFile) {\n      try {\n        await navigator.clipboard.writeText(selectedFile.content)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000)\n      } catch (error) {\n        console.error('Failed to copy content:', error)\n      }\n    }\n  }, [selectedFile])\n\n  const filterFileSystem = useCallback((items: FileSystemItemType[], query: string): FileSystemItemType[] => {\n    if (!query) return items\n\n    return items.reduce<FileSystemItemType[]>((filtered, item) => {\n      if (item.type === 'file') {\n        if (item.name.toLowerCase().includes(query.toLowerCase())) {\n          filtered.push(item)\n        }\n      } else {\n        const filteredChildren = filterFileSystem((item as FolderType).children, query)\n        if (filteredChildren.length > 0 || item.name.toLowerCase().includes(query.toLowerCase())) {\n          filtered.push({\n            ...item,\n            children: filteredChildren,\n            expanded: true\n          } as FolderType)\n        }\n      }\n      return filtered\n    }, [])\n  }, [])\n\n  const filteredFileSystem = useMemo(() => {\n    return searchQuery\n      ? { ...fileSystem, children: filterFileSystem(fileSystem.children, searchQuery) }\n      : fileSystem\n  }, [fileSystem, searchQuery, filterFileSystem])\n\n  const handleRefresh = useCallback(() => {\n    setFileSystem(initialData)\n    setSelectedFile(null)\n    setSearchQuery('')\n    onRefresh?.()\n  }, [initialData, onRefresh])\n\n  const handleCloseFile = useCallback(() => {\n    setSelectedFile(null)\n  }, [])\n\n  return (\n    <FileExplorerErrorBoundary>\n      <div className={cn(\"container p-0\", className)}>\n        {showTitle && <h1 className=\"text-3xl font-bold mb-6 text-center\">{title}</h1>}\n\n        <div className=\"relative grid grid-cols-1 lg:grid-cols-6 gap-6\">\n          <Card className={cn(\"lg:col-span-2 p-4 overflow-auto\", cardClassName)} style={{ height }}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold\">Files</h2>\n              <div className=\"flex gap-1\">\n                {onRefresh && (\n                  <Button variant=\"ghost\" size=\"icon\" onClick={handleRefresh} disabled={loading}>\n                    <RefreshCw className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => setFileSystem(initialData)} disabled={loading}>\n                  <ChevronsUp className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mb-4 relative\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search files...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-8\"\n                disabled={loading}\n              />\n              {searchQuery && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-1 top-1.5 h-6 w-6\"\n                  onClick={() => setSearchQuery('')}\n                  disabled={loading}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n\n            {loading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <div className=\"file-tree\" role=\"tree\">\n                {filteredFileSystem.children.map((item) => (\n                  <FileTreeItem\n                    key={item.id}\n                    item={item}\n                    onToggleExpand={handleToggleExpand}\n                    onSelectFile={handleSelectFile}\n                    selectedFileId={selectedFile?.id || null}\n                    defaultFileIcon={defaultFileIcon}\n                    defaultFolderIcon={defaultFolderIcon}\n                    defaultFolderOpenIcon={defaultFolderOpenIcon}\n                  />\n                ))}\n                {filteredFileSystem.children.length === 0 && (\n                  <div className=\"py-4 text-center text-muted-foreground text-sm\">\n                    No files match your search\n                  </div>\n                )}\n              </div>\n            )}\n          </Card>\n\n          <Card\n            className={cn(\n              \"lg:col-span-4 overflow-hidden flex flex-col\",\n              \"lg:static lg:translate-x-0 lg:opacity-100\",\n              selectedFile\n                ? \"absolute inset-0 z-50 lg:relative lg:inset-auto lg:z-auto translate-x-0 opacity-100\"\n                : \"absolute inset-0 z-50 lg:relative lg:inset-auto lg:z-auto translate-x-full opacity-0 lg:translate-x-0 lg:opacity-100\",\n              \"transition-all duration-300 ease-in-out\",\n              cardClassName\n            )}\n            style={{ height }}\n          >\n            {selectedFile ? (\n              <>\n                <div className=\"flex items-center justify-between border-b p-4\">\n                  <div className=\"flex items-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={handleCloseFile}\n                      className=\"h-8 w-8 mr-2 lg:hidden\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                    <span className=\"mr-2\">{getFileIcon(selectedFile, defaultFileIcon)}</span>\n                    <span className=\"font-medium\">{selectedFile.name}</span>\n                  </div>\n                  {!selectedFile.isImage && !isImageFile(selectedFile.name) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={handleCopyContent}\n                      className=\"h-8 w-8\"\n                    >\n                      {copied ? (\n                        <Check className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <Copy className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"grow overflow-auto p-0\">\n                  {selectedFile.isImage || isImageFile(selectedFile.name) ? (\n                    <div className=\"flex items-center justify-center h-full p-6\">\n                      <div className=\"max-w-full max-h-full flex flex-col items-center\">\n                        <img\n                          src={selectedFile.imageUrl || selectedFile.content}\n                          alt={selectedFile.name}\n                          className=\"max-w-full max-h-full object-contain rounded-lg shadow-lg\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'none';\n                            const parent = target.parentElement;\n                            if (parent) {\n                              parent.innerHTML = `\n                              <div class=\"flex flex-col items-center justify-center text-muted-foreground\">\n                                <Image class=\"h-16 w-16 mb-4\" />\n                                <p class=\"text-lg font-medium\">Unable to display image</p>\n                                <p class=\"text-sm\">${selectedFile.name}</p>\n                              </div>\n                            `;\n                            }\n                          }}\n                        />\n                        <p className=\"mt-4 text-sm text-muted-foreground text-center\">\n                          {selectedFile.name}\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <SyntaxHighlighter\n                      language={selectedFile.language || 'text'}\n                      style={atomOneDark}\n                      customStyle={{\n                        margin: 0,\n                        padding: '1rem',\n                        height: fileContentHeight,\n                        borderRadius: 0,\n                        fontSize: '0.9rem',\n                        backgroundColor: 'hsl(var(--background))',\n                      }}\n                    // showLineNumbers={true}\n                    >\n                      {selectedFile.content}\n                    </SyntaxHighlighter>\n                  )}\n                </div>\n              </>\n            ) : (\n              <div className=\"flex flex-col items-center justify-center h-full text-center p-6\">\n                <FileText className=\"h-16 w-16 mb-4 text-muted-foreground/50\" />\n                <h3 className=\"text-xl font-medium mb-2\">No File Selected</h3>\n                <p className=\"text-muted-foreground\">\n                  Select a file from the sidebar to view its contents\n                </p>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n    </FileExplorerErrorBoundary>\n  )\n}",
      "type": "registry:component"
    }
  ]
}