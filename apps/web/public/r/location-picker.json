{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "location-picker",
  "type": "registry:component",
  "title": "Location Picker",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A location locator component",
  "registryDependencies": [
    "button",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "registry/new-york/location-picker/location-picker.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect, useCallback } from 'react'\nimport { Input } from '@/components/ui/input'\nimport { MapPin, LoaderCircle, Search, MapPinned, Locate } from 'lucide-react'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\ntype LocationSuggestion = {\n  display_name: string;\n  place_id: number;\n  address: {\n    city?: string;\n    county?: string;\n    state?: string;\n    country?: string;\n    [key: string]: string | undefined;\n  };\n}\n\ninterface LocationPickerProps {\n  className?: string;\n  autoDetectOnLoad?: boolean;\n  defaultLocation?: string;\n  onChange?: (location: string) => void;\n  variant?: 'popover' | 'inline';\n  placeholder?: string;\n  showLabel?: boolean;\n}\n\nexport function LocationPicker({\n  className,\n  autoDetectOnLoad = false,\n  defaultLocation = \"\",\n  onChange,\n  variant = 'popover',\n  placeholder = \"Enter city, district, or area\",\n  showLabel = true,\n}: LocationPickerProps) {\n  const [activeCity, setActiveCity] = useState(defaultLocation)\n  const [isLoading, setIsLoading] = useState(false)\n  const [locationSearch, setLocationSearch] = useState('')\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n  const [suggestions, setSuggestions] = useState<LocationSuggestion[]>([])\n  const [isFetchingSuggestions, setIsFetchingSuggestions] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const API_URL = \"https://nominatim.openstreetmap.org\"\n\n  const getLocation = async (lat: number, long: number) => {\n    setIsLoading(true)\n    try {\n      const res = await fetch(`${API_URL}/reverse?lat=${lat}&lon=${long}&format=json`)\n      const data = await res.json()\n      const city = data.address?.county || data.address?.city || data.address?.state || ''\n\n      if (city) {\n        setActiveCity(city)\n      }\n    } catch (error) {\n      console.log(\"Error fetching location:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const searchLocation = async () => {\n    if (!locationSearch.trim()) return\n\n    setIsLoading(true)\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(locationSearch)}&format=json&addressdetails=1`\n      )\n      const data = await res.json()\n\n      if (data && data.length > 0) {\n        const place = data[0]\n        const city = place.address?.city || place.address?.county || place.address?.state || ''\n\n        setActiveCity(city)\n        setIsPopoverOpen(false)\n      } else {\n        console.log(\"No location found\")\n      }\n    } catch (error) {\n      console.log(\"Error searching location:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getCurrentLocation = useCallback(() => {\n    setIsLoading(true)\n    setError(null)\n\n    if (!navigator.geolocation) {\n      setError(\"Geolocation is not supported by this browser\")\n      setIsLoading(false)\n      return\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords\n        getLocation(latitude, longitude)\n      },\n      (error) => {\n        let errorMessage = \"Unable to retrieve location\"\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = \"Location access denied by user\"\n            break\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information unavailable\"\n            break\n          case error.TIMEOUT:\n            errorMessage = \"Location request timed out\"\n            break\n        }\n        setError(errorMessage)\n        setIsLoading(false)\n      },\n      { timeout: 10000, enableHighAccuracy: true }\n    )\n  }, []);\n\n  const fetchSuggestions = async (query: string) => {\n    if (!query.trim() || query.length < 2) {\n      setSuggestions([]);\n      return;\n    }\n\n    setIsFetchingSuggestions(true);\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`\n      );\n      const data = await res.json();\n      setSuggestions(data);\n    } catch (error) {\n      console.log(\"Error fetching suggestions:\", error);\n      setSuggestions([]);\n    } finally {\n      setIsFetchingSuggestions(false);\n    }\n  };\n\n  const selectSuggestion = (suggestion: LocationSuggestion) => {\n    const city = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    setActiveCity(city);\n    setLocationSearch(city);\n    setSuggestions([]);\n  };\n\n  const formatLocationName = (suggestion: LocationSuggestion) => {\n    const mainName = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    const region = suggestion.address?.state || suggestion.address?.country || '';\n\n    if (mainName && region && mainName !== region) {\n      return `${mainName}, ${region}`;\n    }\n    return mainName || suggestion.display_name.split(',')[0];\n  };\n\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      fetchSuggestions(locationSearch);\n    }, 300);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [locationSearch]);\n\n  useEffect(() => {\n    if (!isPopoverOpen) {\n      setSuggestions([]);\n    }\n  }, [isPopoverOpen]);\n\n  useEffect(() => {\n    if (autoDetectOnLoad && !activeCity) {\n      getCurrentLocation();\n    }\n  }, [autoDetectOnLoad, activeCity, getCurrentLocation]);\n\n  useEffect(() => {\n    if (onChange && activeCity) {\n      onChange(activeCity);\n    }\n  }, [activeCity, onChange]);\n\n  if (variant === 'inline') {\n    return (\n      <div className={cn(\"space-y-4\", className)}>\n        {showLabel && (\n          <div className=\"space-y-1\">\n            <h4 className=\"font-medium text-sm\">Location</h4>\n            <p className=\"text-xs text-muted-foreground\">Find products near you</p>\n          </div>\n        )}\n\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative flex-1\">\n              <Input\n                placeholder={placeholder}\n                value={locationSearch}\n                onChange={(e) => setLocationSearch(e.target.value)}\n                onKeyUp={(e) => e.key === 'Enter' && suggestions.length === 0 && searchLocation()}\n                aria-label=\"Search for location\"\n                aria-describedby={suggestions.length > 0 ? \"suggestions-list\" : undefined}\n              />\n            </div>\n\n            <Button\n              className=\"rounded-md h-10 w-10 p-0\"\n              variant=\"outline-solid\"\n              onClick={searchLocation}\n              disabled={isLoading || !locationSearch.trim()}\n              title=\"Search Location\"\n            >\n              {isLoading ? (\n                <LoaderCircle className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Search className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"outline-solid\"\n              onClick={getCurrentLocation}\n              className=\"rounded-md h-10 w-10 p-0\"\n              title=\"Use Current Location\"\n            >\n              <Locate className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {activeCity && (\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground bg-muted/50 p-2 rounded-md\">\n              <MapPin size={14} className=\"text-primary\" />\n              <span>Current: {activeCity}</span>\n            </div>\n          )}\n\n          {suggestions.length > 0 && (\n            <div\n              id=\"suggestions-list\"\n              role=\"listbox\"\n              aria-label=\"Location suggestions\"\n              className=\"w-full bg-background rounded-md border border-border shadow-lg max-h-60 overflow-y-auto\"\n            >\n              {suggestions.map((suggestion) => (\n                <div\n                  key={suggestion.place_id}\n                  role=\"option\"\n                  aria-selected={false}\n                  tabIndex={0}\n                  className=\"px-4 py-2 hover:bg-muted cursor-pointer border-b border-border last:border-0 transition-colors\"\n                  onClick={() => selectSuggestion(suggestion)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault()\n                      selectSuggestion(suggestion)\n                    }\n                  }}\n                >\n                  <div className=\"flex items-start\">\n                    <MapPinned size={16} className=\"text-primary mt-0.5 mr-2 shrink-0\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {formatLocationName(suggestion)}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground truncate max-w-[250px]\">\n                        {suggestion.display_name}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isFetchingSuggestions && locationSearch.length >= 2 && suggestions.length === 0 && (\n            <div className=\"w-full bg-background rounded-md border border-border shadow-md p-4 text-center\">\n              <LoaderCircle size={20} className=\"animate-spin mx-auto text-primary\" />\n              <p className=\"text-sm text-muted-foreground mt-1\">Searching locations...</p>\n            </div>\n          )}\n\n          {locationSearch.length >= 2 && !isFetchingSuggestions && suggestions.length === 0 && (\n            <div className=\"w-full bg-background rounded-md border border-border p-4 text-center\">\n              <p className=\"text-sm text-muted-foreground\">No locations found for &quot;{locationSearch}&quot;</p>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"w-full bg-destructive/10 rounded-md border border-destructive/20 p-3 text-center\">\n              <p className=\"text-sm text-destructive\">{error}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n      <PopoverTrigger asChild>\n        <div className={cn(\n          \"flex items-center gap-2 text-muted-foreground hover:text-foreground border-b border-transparent hover:border-primary cursor-pointer px-3 py-2 transition-colors\",\n          className\n        )}>\n          <MapPin size={16} className=\"text-primary\" />\n          {isLoading ? (\n            <div className=\"flex items-center gap-1\">\n              <LoaderCircle size={14} className=\"animate-spin\" />\n              <span className=\"text-sm\">Locating...</span>\n            </div>\n          ) : (\n            <span className=\"text-sm font-medium\">\n              {activeCity.length > 15 ? activeCity.slice(0, 15) + '...' : activeCity || 'Select Location'}\n            </span>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0 shadow-lg dark:bg-background\" side=\"bottom\" align=\"start\" sideOffset={4}>\n        <div className=\"p-4 border-b dark:border-border\">\n          <h4 className=\"font-medium text-lg mb-1 dark:text-foreground\">Change location</h4>\n          <p className=\"text-sm text-muted-foreground\">Find products near you</p>\n        </div>\n\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <div className=\"relative flex-1\">\n              <Input\n                placeholder={placeholder}\n                value={locationSearch}\n                onChange={(e) => setLocationSearch(e.target.value)}\n                onKeyUp={(e) => e.key === 'Enter' && suggestions.length === 0 && searchLocation()}\n                aria-label=\"Search for location\"\n                aria-describedby={suggestions.length > 0 ? \"suggestions-list\" : undefined}\n              />\n            </div>\n\n            <Button\n              className=\"rounded-md h-10 w-10 p-0\"\n              variant=\"outline-solid\"\n              onClick={searchLocation}\n              disabled={isLoading || !locationSearch.trim()}\n              title=\"Search Location\"\n            >\n              {isLoading ? (\n                <LoaderCircle className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Search className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"outline-solid\"\n              onClick={getCurrentLocation}\n              className=\"rounded-md h-10 w-10 p-0\"\n              title=\"Use Current Location\"\n            >\n              <Locate className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {suggestions.length > 0 && (\n            <div className=\"z-50 w-full bg-background rounded-md border border-border shadow-lg max-h-60 overflow-y-auto mt-1 mb-4\">\n              {suggestions.map((suggestion) => (\n                <div\n                  key={suggestion.place_id}\n                  className=\"px-4 py-2 hover:bg-muted cursor-pointer border-b border-border last:border-0 transition-colors\"\n                  onClick={() => selectSuggestion(suggestion)}\n                >\n                  <div className=\"flex items-start\">\n                    <MapPinned size={16} className=\"text-primary mt-0.5 mr-2 shrink-0\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {formatLocationName(suggestion)}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground truncate max-w-[250px]\">\n                        {suggestion.display_name}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isFetchingSuggestions && locationSearch.length >= 2 && suggestions.length === 0 && (\n            <div className=\"z-50 w-full bg-background rounded-md border border-border shadow-md p-4 text-center mt-1 mb-4\">\n              <LoaderCircle size={20} className=\"animate-spin mx-auto text-primary\" />\n              <p className=\"text-sm text-muted-foreground mt-1\">Searching locations...</p>\n            </div>\n          )}\n\n          {locationSearch.length >= 2 && !isFetchingSuggestions && suggestions.length === 0 && (\n            <div className=\"w-full bg-background rounded-md border border-border p-4 text-center\">\n              <p className=\"text-sm text-muted-foreground\">No locations found for &quot;{locationSearch}&quot;</p>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"w-full bg-destructive/10 rounded-md border border-destructive/20 p-3 text-center\">\n              <p className=\"text-sm text-destructive\">{error}</p>\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}