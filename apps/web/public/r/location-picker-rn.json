{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "location-picker-rn",
  "type": "registry:component",
  "title": "Location Picker (React Native)",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A location picker component for React Native",
  "registryDependencies": [
    "https://reactnativereusables.com/r/new-york/input.json",
    "https://reactnativereusables.com/r/new-york/button.json",
    "https://reactnativereusables.com/r/new-york/popover.json"
  ],
  "files": [
    {
      "path": "r/new-york/location-picker/location-picker-rn.tsx",
      "content": "import * as React from \"react\"\nimport { useState, useEffect, useCallback } from 'react'\nimport { View, ScrollView, Platform, ActivityIndicator, Pressable } from 'react-native'\nimport * as Location from 'expo-location'\nimport * as Device from 'expo-device'\nimport { Input } from '@/components/ui/input'\nimport { MaterialIcons } from '@expo/vector-icons'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { Button } from \"@/components/ui/button\"\nimport { Text } from \"@/components/ui/text\"\nimport { cn } from \"@/lib/utils\"\n\ntype LocationSuggestion = {\n  display_name: string;\n  place_id: number;\n  address: {\n    city?: string;\n    county?: string;\n    state?: string;\n    country?: string;\n    [key: string]: string | undefined;\n  };\n}\n\nexport interface LocationPickerTheme {\n  container?: string;\n  input?: string;\n  searchButton?: string;\n  locateButton?: string;\n  suggestionsContainer?: string;\n  suggestionItem?: string;\n  suggestionIcon?: string;\n  suggestionLocation?: string;\n  suggestionAddress?: string;\n  errorContainer?: string;\n  loadingContainer?: string;\n  popoverContent?: string;\n  popoverTrigger?: string;\n}\n\ninterface LocationPickerProps {\n  className?: string;\n  autoDetectOnLoad?: boolean;\n  defaultLocation?: string;\n  onChange?: (location: string) => void;\n  variant?: 'popover' | 'inline';\n  placeholder?: string;\n  theme?: LocationPickerTheme;\n}\n\nexport function LocationPicker({\n  className,\n  autoDetectOnLoad = false,\n  defaultLocation = \"\",\n  onChange,\n  variant = 'popover',\n  placeholder = \"Enter city, district, or area\",\n  theme,\n}: LocationPickerProps) {\n  const [activeCity, setActiveCity] = useState(defaultLocation)\n  const [isLoading, setIsLoading] = useState(false)\n  const [locationSearch, setLocationSearch] = useState('')\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n  const [suggestions, setSuggestions] = useState<LocationSuggestion[]>([])\n  const [isFetchingSuggestions, setIsFetchingSuggestions] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const API_URL = \"https://nominatim.openstreetmap.org\"\n\n  const defaultTheme: LocationPickerTheme = {\n    container: \"flex-1 gap-4\",\n    input: \"border-border focus:border-primary bg-background text-foreground\",\n    searchButton: \"rounded-md h-10 w-10 items-center justify-center bg-primary\",\n    locateButton: \"rounded-md h-10 w-10 items-center justify-center bg-secondary\",\n    suggestionsContainer: \"bg-background rounded-md border border-border shadow-lg max-h-60\",\n    suggestionItem: \"px-4 py-3 border-b border-border\",\n    suggestionLocation: \"text-sm font-medium text-foreground\",\n    suggestionAddress: \"text-xs text-muted-foreground\",\n    suggestionIcon: \"text-primary\",\n    errorContainer: \"bg-destructive/10 rounded-md border border-destructive/20 p-3\",\n    loadingContainer: \"bg-background rounded-md border border-border shadow-md p-4 items-center\",\n    popoverContent: \"w-80 p-0 shadow-lg\",\n    popoverTrigger: \"flex-row items-center gap-2 text-muted-foreground border-b border-transparent px-3 py-2\"\n  }\n\n  const appliedTheme = { ...defaultTheme, ...theme }\n\n  const getLocation = async (lat: number, long: number) => {\n    setIsLoading(true)\n    try {\n      const res = await fetch(`${API_URL}/reverse?lat=${lat}&lon=${long}&format=json`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'LocationPicker/1.0'\n        }\n      })\n      \n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`)\n      }\n      \n      const text = await res.text()\n      console.log(\"Reverse Location Response:\", text)\n      \n      let data\n      try {\n        data = JSON.parse(text)\n      } catch (parseError) {\n        console.log(\"Failed to parse JSON:\", text)\n        throw new Error(\"Invalid response format\")\n      }\n      \n      const city = data.address?.county || data.address?.city || data.address?.state || ''\n\n      if (city) {\n        setActiveCity(city)\n      }\n    } catch (error) {\n      console.log(\"Error fetching location:\", error)\n      setError(\"Failed to get location details\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const searchLocation = async () => {\n    if (!locationSearch.trim()) return\n\n    setIsLoading(true)\n    setError(null)\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(locationSearch)}&format=json&addressdetails=1`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'LocationPicker/1.0'\n          }\n        }\n      )\n      \n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`)\n      }\n      \n      const text = await res.text()\n      console.log(\"Search Location Response:\", text)\n      \n      let data\n      try {\n        data = JSON.parse(text)\n      } catch (parseError) {\n        console.log(\"Failed to parse JSON:\", text)\n        throw new Error(\"Invalid response format\")\n      }\n      \n      console.log(\"Search Location Parsed Data:\", data)\n      if (data && data.length > 0) {\n        const place = data[0]\n        const city = place.address?.city || place.address?.county || place.address?.state || ''\n\n        setActiveCity(city)\n        setLocationSearch('')\n        setSuggestions([])\n        setIsPopoverOpen(false)\n      } else {\n        console.log(\"No location found\")\n        setError(\"No location found for your search\")\n      }\n    } catch (error) {\n      console.log(\"Error searching location:\", error)\n      setError(\"Failed to search location\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getCurrentLocation = useCallback(async () => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      if (Platform.OS === 'web') {\n        if (!navigator.geolocation) {\n          setError(\"Geolocation is not supported by this browser\")\n          setIsLoading(false)\n          return\n        }\n\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords\n            getLocation(latitude, longitude)\n          },\n          (error) => {\n            let errorMessage = \"Unable to retrieve location\"\n            switch (error.code) {\n              case error.PERMISSION_DENIED:\n                errorMessage = \"Location access denied by user\"\n                break\n              case error.POSITION_UNAVAILABLE:\n                errorMessage = \"Location information unavailable\"\n                break\n              case error.TIMEOUT:\n                errorMessage = \"Location request timed out\"\n                break\n            }\n            setError(errorMessage)\n            setIsLoading(false)\n          },\n          { timeout: 10000, enableHighAccuracy: true }\n        )\n      } else {\n        if (Platform.OS === 'android' && !Device.isDevice) {\n          setError('Location services not available on emulator')\n          setIsLoading(false)\n          return\n        }\n\n        let { status } = await Location.requestForegroundPermissionsAsync()\n        if (status !== 'granted') {\n          setError('Permission to access location was denied')\n          setIsLoading(false)\n          return\n        }\n\n        let location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High,\n        })\n        \n        const { latitude, longitude } = location.coords\n        getLocation(latitude, longitude)\n      }\n    } catch (error) {\n      setError('Failed to get current location')\n      setIsLoading(false)\n    }\n  }, []);\n\n  const fetchSuggestions = async (query: string) => {\n    if (!query.trim() || query.length < 2) {\n      setSuggestions([]);\n      setError(null);\n      return;\n    }\n\n    setIsFetchingSuggestions(true);\n    setError(null);\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'LocationPicker/1.0'\n          }\n        }\n      );\n      \n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`)\n      }\n      \n      const text = await res.text()\n      console.log(\"Suggestions Response:\", text)\n      \n      let data\n      try {\n        data = JSON.parse(text)\n      } catch (parseError) {\n        console.log(\"Failed to parse suggestions JSON:\", text)\n        setSuggestions([]);\n        return;\n      }\n      \n      console.log(\"Suggestions Parsed Data:\", data)\n      setSuggestions(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.log(\"Error fetching suggestions:\", error);\n      setSuggestions([]);\n    } finally {\n      setIsFetchingSuggestions(false);\n    }\n  };\n\n  const selectSuggestion = (suggestion: LocationSuggestion) => {\n    const city = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    setActiveCity(city);\n    setLocationSearch(\"\");\n    setSuggestions([]);\n    setIsPopoverOpen(false);\n  };\n\n  const formatLocationName = (suggestion: LocationSuggestion) => {\n    const mainName = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    const region = suggestion.address?.state || suggestion.address?.country || '';\n\n    if (mainName && region && mainName !== region) {\n      return `${mainName}, ${region}`;\n    }\n    return mainName || suggestion.display_name.split(',')[0];\n  };\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      fetchSuggestions(locationSearch);\n    }, 300);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [locationSearch]);\n\n  useEffect(() => {\n    if (!isPopoverOpen) {\n      setSuggestions([]);\n    }\n  }, [isPopoverOpen]);\n\n  useEffect(() => {\n    if (autoDetectOnLoad && !activeCity) {\n      getCurrentLocation();\n    }\n  }, [autoDetectOnLoad, activeCity, getCurrentLocation]);\n\n  useEffect(() => {\n    if (onChange && activeCity) {\n      onChange(activeCity);\n    }\n  }, [activeCity, onChange]);\n\n  if (variant === 'inline') {\n    return (\n      <View className={cn(appliedTheme.container, className)}>\n        <View className=\"gap-3\">\n          <View className=\"flex-row items-center gap-2\">\n            <View className=\"flex-1\">\n              <Input\n                placeholder={placeholder}\n                value={activeCity || locationSearch}\n                onChangeText={(value) => {\n                  setLocationSearch(value);\n                  if (activeCity && value !== activeCity) {\n                    setActiveCity('');\n                  }\n                }}\n                className={appliedTheme.input}\n              />\n            </View>\n\n            <Button\n              className={appliedTheme.searchButton}\n              variant=\"outline\"\n              onPress={searchLocation}\n              disabled={isLoading || !locationSearch.trim()}\n              size=\"icon\"\n            >\n              {isLoading ? (\n                <ActivityIndicator size=\"small\" color=\"#fff\" />\n              ) : (\n                <MaterialIcons name=\"search\" size={16} color=\"#fff\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onPress={getCurrentLocation}\n              className={appliedTheme.locateButton}\n              size=\"icon\"\n            >\n              <MaterialIcons name=\"my-location\" size={16} color=\"#666\" />\n            </Button>\n          </View>\n\n          {suggestions.length > 0 && (\n            <ScrollView\n              className={appliedTheme.suggestionsContainer}\n              style={{ maxHeight: 240 }}\n              showsVerticalScrollIndicator={false}\n            >\n              {suggestions.map((suggestion) => (\n                <Pressable\n                  key={suggestion.place_id}\n                  className={appliedTheme.suggestionItem}\n                  onPress={() => selectSuggestion(suggestion)}\n                >\n                  <View className=\"flex-row items-start\">\n                    <MaterialIcons \n                      name=\"place\" \n                      size={16} \n                      color=\"#0066cc\" \n                      style={{ marginTop: 2, marginRight: 8 }} \n                    />\n                    <View className=\"flex-1\">\n                      <Text className={appliedTheme.suggestionLocation}>\n                        {formatLocationName(suggestion)}\n                      </Text>\n                      <Text className={appliedTheme.suggestionAddress} numberOfLines={1}>\n                        {suggestion.display_name}\n                      </Text>\n                    </View>\n                  </View>\n                </Pressable>\n              ))}\n            </ScrollView>\n          )}\n\n          {isFetchingSuggestions && locationSearch.length >= 2 && suggestions.length === 0 && (\n            <View className={appliedTheme.loadingContainer}>\n              <ActivityIndicator size=\"small\" color=\"#0066cc\" />\n              <Text className=\"text-sm text-muted-foreground mt-1\">Searching locations...</Text>\n            </View>\n          )}\n\n          {locationSearch.length >= 2 && !isFetchingSuggestions && suggestions.length === 0 && (\n            <View className={appliedTheme.loadingContainer}>\n              <Text className=\"text-sm text-muted-foreground\">No locations found for \"{locationSearch}\"</Text>\n            </View>\n          )}\n\n          {error && (\n            <View className={appliedTheme.errorContainer}>\n              <Text className=\"text-sm text-destructive\">{error}</Text>\n            </View>\n          )}\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <Popover onOpenChange={setIsPopoverOpen}>\n      <PopoverTrigger asChild>\n        <Pressable className={cn(appliedTheme.popoverTrigger, className)}>\n          <MaterialIcons name=\"place\" size={16} color=\"#0066cc\" />\n          {isLoading ? (\n            <View className=\"flex-row items-center gap-1\">\n              <ActivityIndicator size=\"small\" color=\"#666\" />\n              <Text className=\"text-sm\">Locating...</Text>\n            </View>\n          ) : (\n            <Text className=\"text-sm font-medium\">\n              {activeCity.length > 15 ? activeCity.slice(0, 15) + '...' : activeCity || 'Select Location'}\n            </Text>\n          )}\n        </Pressable>\n      </PopoverTrigger>\n      <PopoverContent className={appliedTheme.popoverContent} side=\"bottom\" align=\"start\" sideOffset={4}>\n        <View className=\"p-4\">\n          <View className=\"flex-row items-center gap-2\">\n            <View className=\"flex-1\">\n              <Input\n                placeholder={placeholder}\n                value={locationSearch}\n                onChangeText={setLocationSearch}\n                className={appliedTheme.input}\n              />\n            </View>\n\n            <Button\n              className={appliedTheme.searchButton}\n              variant=\"outline\"\n              onPress={searchLocation}\n              disabled={isLoading || !locationSearch.trim()}\n              size=\"icon\"\n            >\n              {isLoading ? (\n                <ActivityIndicator size=\"small\" color=\"#fff\" />\n              ) : (\n                <MaterialIcons name=\"search\" size={16} color=\"#fff\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onPress={getCurrentLocation}\n              className={appliedTheme.locateButton}\n              size=\"icon\"\n            >\n              <MaterialIcons name=\"my-location\" size={16} color=\"#666\" />\n            </Button>\n          </View>\n\n          {suggestions.length > 0 && (\n            <ScrollView\n              className={cn(\"mt-1 mb-4\", appliedTheme.suggestionsContainer)}\n              style={{ maxHeight: 240 }}\n              showsVerticalScrollIndicator={false}\n            >\n              {suggestions.map((suggestion) => (\n                <Pressable\n                  key={suggestion.place_id}\n                  className={appliedTheme.suggestionItem}\n                  onPress={() => selectSuggestion(suggestion)}\n                >\n                  <View className=\"flex-row items-start\">\n                    <MaterialIcons \n                      name=\"place\" \n                      size={16} \n                      color=\"#0066cc\" \n                      style={{ marginTop: 2, marginRight: 8 }} \n                    />\n                    <View className=\"flex-1\">\n                      <Text className={appliedTheme.suggestionLocation}>\n                        {formatLocationName(suggestion)}\n                      </Text>\n                      <Text className={appliedTheme.suggestionAddress} numberOfLines={1}>\n                        {suggestion.display_name}\n                      </Text>\n                    </View>\n                  </View>\n                </Pressable>\n              ))}\n            </ScrollView>\n          )}\n\n          {isFetchingSuggestions && locationSearch.length >= 2 && suggestions.length === 0 && (\n            <View className={cn(\"mt-1 mb-4\", appliedTheme.loadingContainer)}>\n              <ActivityIndicator size=\"small\" color=\"#0066cc\" />\n              <Text className=\"text-sm text-muted-foreground mt-1\">Searching locations...</Text>\n            </View>\n          )}\n\n          {locationSearch.length >= 2 && !isFetchingSuggestions && suggestions.length === 0 && (\n            <View className={appliedTheme.loadingContainer}>\n              <Text className=\"text-sm text-muted-foreground\">No locations found for \"{locationSearch}\"</Text>\n            </View>\n          )}\n\n          {error && (\n            <View className={appliedTheme.errorContainer}>\n              <Text className=\"text-sm text-destructive\">{error}</Text>\n            </View>\n          )}\n        </View>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}