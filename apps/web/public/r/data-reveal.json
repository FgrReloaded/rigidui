{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-reveal",
  "type": "registry:component",
  "title": "Data Reveal",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A animated data reveal component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "r/new-york/data-reveal/data-reveal.tsx",
      "content": "\"use client\"\nimport { cn } from \"@/lib/utils\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { useState, useEffect, ReactNode, createContext, useContext } from \"react\"\n\nconst defaultAnimation = {\n    duration: 0.7,\n    staggerDelay: 0.08,\n    ease: [0.16, 1, 0.3, 1],\n    containerScale: 0.8,\n    itemScale: 0.7,\n    blur: 4\n}\n\ninterface DataRevealContextType {\n    isRevealed: boolean\n    toggle: () => void\n    disabled: boolean\n}\n\nconst DataRevealContext = createContext<DataRevealContextType | null>(null)\n\nconst useDataReveal = () => {\n    const context = useContext(DataRevealContext)\n    if (!context) {\n        throw new Error('DataReveal compound components must be used within DataReveal')\n    }\n    return context\n}\n\ninterface DataRevealProps {\n    children: ReactNode\n    defaultRevealed?: boolean\n    onToggle?: (isRevealed: boolean) => void\n    disabled?: boolean\n    autoHide?: boolean\n    autoHideDelay?: number\n}\n\nfunction DataReveal({\n    children,\n    defaultRevealed = false,\n    onToggle,\n    disabled = false,\n    autoHide = false,\n    autoHideDelay = 3000\n}: DataRevealProps) {\n    const [isRevealed, setIsRevealed] = useState(defaultRevealed)\n\n    useEffect(() => {\n        if (autoHide && isRevealed) {\n            const timer = setTimeout(() => {\n                handleToggle()\n            }, autoHideDelay)\n            return () => clearTimeout(timer)\n        }\n    }, [autoHide, isRevealed, autoHideDelay])\n\n    const handleToggle = () => {\n        if (disabled) return\n        \n        const newRevealedState = !isRevealed\n        setIsRevealed(newRevealedState)\n        onToggle?.(newRevealedState)\n    }\n\n    const contextValue: DataRevealContextType = {\n        isRevealed,\n        toggle: handleToggle,\n        disabled\n    }\n\n    return (\n        <DataRevealContext.Provider value={contextValue}>\n            <div className=\"flex items-center\">\n                {children}\n            </div>\n        </DataRevealContext.Provider>\n    )\n}\n\ninterface RevealButtonProps {\n    children?: ReactNode\n    text?: string\n    className?: string\n}\n\nfunction RevealButton({ children, text, className }: RevealButtonProps) {\n    const { toggle, disabled } = useDataReveal()\n\n    return (\n        <div \n            className={cn(\n                \"flex items-center justify-center py-2 px-4 rounded-full border border-gray-300 bg-black cursor-pointer hover:border-gray-400 transition-colors\",\n                disabled && \"opacity-50 cursor-not-allowed\",\n                className\n            )}\n            onClick={toggle}\n        >\n            <span>\n                {children || text || 'Reveal'}\n            </span>\n        </div>\n    )\n}\n\ninterface RevealContainerProps {\n    children: ReactNode\n    className?: string\n}\n\nfunction RevealContainer({ children, className }: RevealContainerProps) {\n    const { isRevealed } = useDataReveal()\n\n    return (\n        <AnimatePresence>\n            {isRevealed && (\n                <motion.div \n                    className={cn(\"flex gap-2 ml-2\", className)}\n                    initial={{ \n                        opacity: 0, \n                        width: 0,\n                        scale: defaultAnimation.containerScale\n                    }}\n                    animate={{ \n                        opacity: 1, \n                        width: \"auto\",\n                        scale: 1\n                    }}\n                    exit={{ \n                        opacity: 0, \n                        width: 0,\n                        scale: defaultAnimation.containerScale\n                    }}\n                    transition={{ \n                        duration: defaultAnimation.duration * 0.7,\n                        ease: defaultAnimation.ease as any\n                    }}\n                >\n                    {children}\n                </motion.div>\n            )}\n        </AnimatePresence>\n    )\n}\n\ninterface RevealItemProps {\n    children?: ReactNode\n    content?: string\n    index?: number\n    className?: string\n}\n\nfunction RevealItem({ children, content, index = 0, className }: RevealItemProps) {\n    return (\n        <motion.div\n            className={cn(\n                \"flex items-center justify-center py-2 px-4 rounded-full border border-gray-300 whitespace-nowrap\",\n                className\n            )}\n            initial={{ \n                opacity: 0,\n                x: -60,\n                scale: defaultAnimation.itemScale,\n                filter: `blur(${defaultAnimation.blur}px)`\n            }}\n            animate={{ \n                opacity: 1,\n                x: 0,\n                scale: 1,\n                filter: \"blur(0px)\"\n            }}\n            exit={{ \n                opacity: 0,\n                x: -40,\n                scale: defaultAnimation.itemScale * 1.1,\n                filter: `blur(${defaultAnimation.blur / 2}px)`\n            }}\n            transition={{ \n                duration: defaultAnimation.duration,\n                delay: index * defaultAnimation.staggerDelay,\n                ease: defaultAnimation.ease as any,\n                filter: { duration: defaultAnimation.duration * 0.6 }\n            }}\n        >\n            <span>\n                {children || content}\n            </span>\n        </motion.div>\n    )\n}\n\nDataReveal.Button = RevealButton\nDataReveal.Container = RevealContainer\nDataReveal.Item = RevealItem\n\nexport { DataReveal, RevealButton, RevealContainer, RevealItem }\nexport type { DataRevealProps, RevealButtonProps, RevealContainerProps, RevealItemProps }\n",
      "type": "registry:component"
    }
  ]
}