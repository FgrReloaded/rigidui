{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-loader",
  "type": "registry:component",
  "title": "Image Loader",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "An advanced image loading component with beautiful loading effect and error handling",
  "files": [
    {
      "path": "r/new-york/image-loader/image-loader.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useMemo, useEffect, useCallback, useRef } from 'react'\nimport { cn } from \"@/lib/utils\"\n\nconst defaultColorCombinations = [\n  { start: 'hsl(220, 15%, 8%)', middle: 'hsl(200, 12%, 18%)', end: 'hsl(240, 10%, 12%)' },\n  { start: 'hsl(35, 25%, 15%)', middle: 'hsl(30, 20%, 25%)', end: 'hsl(25, 15%, 10%)' },\n  { start: 'hsl(210, 20%, 12%)', middle: 'hsl(200, 15%, 22%)', end: 'hsl(215, 18%, 8%)' },\n  { start: 'hsl(150, 30%, 8%)', middle: 'hsl(140, 25%, 15%)', end: 'hsl(160, 20%, 6%)' },\n  { start: 'hsl(230, 35%, 6%)', middle: 'hsl(220, 30%, 12%)', end: 'hsl(240, 25%, 4%)' },\n  { start: 'hsl(20, 40%, 12%)', middle: 'hsl(15, 35%, 18%)', end: 'hsl(10, 30%, 8%)' },\n  { start: 'hsl(280, 25%, 10%)', middle: 'hsl(270, 20%, 16%)', end: 'hsl(290, 15%, 6%)' },\n  { start: 'hsl(0, 0%, 8%)', middle: 'hsl(0, 0%, 18%)', end: 'hsl(0, 0%, 4%)' },\n]\n\nconst hashString = (str: string): number => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash);\n}\n\nconst SVGPattern = React.memo(({\n  colors,\n  uniqueId,\n  randomSeed\n}: {\n  colors: ColorCombination;\n  uniqueId: string;\n  randomSeed: number;\n}) => {\n  const gradientId = `ffflux-gradient-${uniqueId}`;\n  const filterId = `ffflux-filter-${uniqueId}`;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\"\n      viewBox=\"0 0 100 100\"\n      width=\"100%\"\n      height=\"100%\"\n      preserveAspectRatio=\"xMidYMid slice\"\n      role=\"img\"\n      aria-label=\"Loading pattern\"\n    >\n      <defs>\n        <linearGradient\n          gradientTransform=\"rotate(150, 0.5, 0.5)\"\n          x1=\"50%\"\n          y1=\"0%\"\n          x2=\"50%\"\n          y2=\"100%\"\n          id={gradientId}\n        >\n          <stop stopColor={colors.start} stopOpacity=\"1\" offset=\"0%\" />\n          {colors.middle && (\n            <stop stopColor={colors.middle} stopOpacity=\"1\" offset=\"50%\" />\n          )}\n          <stop stopColor={colors.end} stopOpacity=\"1\" offset=\"100%\" />\n        </linearGradient>\n        <filter\n          id={filterId}\n          x=\"-20%\"\n          y=\"-20%\"\n          width=\"140%\"\n          height=\"140%\"\n          filterUnits=\"objectBoundingBox\"\n          primitiveUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feTurbulence\n            type=\"fractalNoise\"\n            baseFrequency=\"0.005 0.003\"\n            numOctaves={2}\n            seed={randomSeed}\n            stitchTiles=\"stitch\"\n            x=\"0%\"\n            y=\"0%\"\n            width=\"100%\"\n            height=\"100%\"\n            result=\"turbulence\"\n          />\n          <feGaussianBlur\n            stdDeviation=\"20 0\"\n            x=\"0%\"\n            y=\"0%\"\n            width=\"100%\"\n            height=\"100%\"\n            in=\"turbulence\"\n            edgeMode=\"duplicate\"\n            result=\"blur\"\n          />\n          <feBlend\n            mode=\"color-dodge\"\n            x=\"0%\"\n            y=\"0%\"\n            width=\"100%\"\n            height=\"100%\"\n            in=\"SourceGraphic\"\n            in2=\"blur\"\n            result=\"blend\"\n          />\n        </filter>\n      </defs>\n      <rect\n        width=\"100%\"\n        height=\"100%\"\n        fill={`url(#${gradientId})`}\n        filter={`url(#${filterId})`}\n      />\n    </svg>\n  );\n})\n\nSVGPattern.displayName = \"SVGPattern\";\n\ninterface ColorCombination {\n  start: string;\n  middle?: string;\n  end: string;\n}\n\ninterface ImageLoaderProps {\n  src: string;\n  alt: string;\n  className?: string;\n  blurIntensity?: string;\n  width?: number | string;\n  height?: number | string;\n  fallbackComponent?: React.ReactNode;\n  onLoad?: () => void;\n  onError?: (error: Event) => void;\n  loading?: \"lazy\" | \"eager\";\n  objectFit?: \"cover\" | \"contain\" | \"fill\" | \"none\" | \"scale-down\";\n  customColors?: ColorCombination[];\n  seed?: number;\n}\n\nexport function ImageLoader({\n  src,\n  alt,\n  className,\n  blurIntensity = \"blur(50px)\",\n  width = 400,\n  height = 300,\n  fallbackComponent,\n  onLoad,\n  onError,\n  loading = \"lazy\",\n  objectFit = \"cover\",\n  customColors,\n  seed\n}: ImageLoaderProps) {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [hasError, setHasError] = useState(false)\n  const imgRef = useRef<HTMLImageElement>(null)\n\n  if (!src) {\n    console.warn('ImageLoader: src prop is required')\n  }\n  if (!alt) {\n    console.warn('ImageLoader: alt prop is required for accessibility')\n  }\n\n  useEffect(() => {\n    setIsLoaded(false)\n    setHasError(false)\n  }, [src])\n\n  const patternData = useMemo(() => {\n    const colorCombinations = customColors && customColors.length > 0 ? customColors : defaultColorCombinations\n\n    const seedValue = seed !== undefined ? seed : hashString(src || 'default')\n    const colorIndex = seedValue % colorCombinations.length\n    const selectedColors = colorCombinations[colorIndex]\n\n    const randomSeed = seedValue % 1000\n    const uniqueId = `${hashString(src || 'default')}-${seedValue}`.slice(0, 9)\n\n    return {\n      colors: selectedColors,\n      uniqueId,\n      randomSeed\n    }\n  }, [customColors, seed, src])\n\n  const handleLoad = useCallback(() => {\n    setIsLoaded(true)\n    onLoad?.()\n  }, [onLoad])\n\n  const handleError = useCallback((event: React.SyntheticEvent<HTMLImageElement>) => {\n    setHasError(true)\n    setIsLoaded(true)\n    onError?.(event.nativeEvent)\n  }, [onError])\n\n  const handleImageRef = useCallback((img: HTMLImageElement | null) => {\n    if (img && img.complete && img.naturalHeight !== 0) {\n      setIsLoaded(true)\n    }\n  }, [])\n\n  const containerStyle = useMemo(() => ({\n    width: typeof width === 'number' ? `${width}px` : width,\n    height: typeof height === 'number' ? `${height}px` : height\n  }), [width, height])\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden rounded-lg\", className)}\n      style={containerStyle}\n      role=\"img\"\n      aria-label={alt}\n    >\n      {!hasError && (\n        <div\n          className={cn(\n            \"absolute inset-0 transition-opacity duration-500\",\n            isLoaded ? 'opacity-0' : 'opacity-100'\n          )}\n          style={{ filter: blurIntensity }}\n          aria-hidden=\"true\"\n        >\n          <SVGPattern\n            colors={patternData.colors}\n            uniqueId={patternData.uniqueId}\n            randomSeed={patternData.randomSeed}\n          />\n        </div>\n      )}\n\n      {!hasError && (\n        <img\n          ref={(img) => {\n            if (imgRef.current) imgRef.current = img;\n            handleImageRef(img);\n          }}\n          src={src}\n          alt={alt}\n          onLoad={handleLoad}\n          onError={handleError}\n          className={cn(\n            \"absolute inset-0 w-full h-full transition-opacity duration-500\",\n            isLoaded ? 'opacity-100' : 'opacity-0'\n          )}\n          style={{ objectFit }}\n          loading={loading}\n          decoding=\"async\"\n        />\n      )}\n\n      {hasError && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-muted z-10\">\n          {fallbackComponent ? (\n            fallbackComponent\n          ) : (\n            <div className=\"text-center text-muted-foreground\">\n              <svg\n                className=\"mx-auto h-12 w-12 mb-2\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                />\n              </svg>\n              <p className=\"text-sm\">Failed to load image</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}