{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "guided-tour",
  "type": "registry:component",
  "title": "Guided Tour",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "An interactive guided tour component to onboard users and showcase features.",
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "r/new-york/guided-tour/guided-tour.tsx",
      "content": "\"use client\"\nimport React, { useState, useEffect, useRef, createContext, useContext, ReactNode, useCallback, useMemo } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { X, ChevronLeft, ChevronRight } from 'lucide-react'\n\nconst useDisableMouseScroll = (isDisabled: boolean) => {\n  useEffect(() => {\n    if (!isDisabled) return\n\n    const preventMouseScroll = (e: WheelEvent) => {\n      e.preventDefault()\n    }\n\n    window.addEventListener('wheel', preventMouseScroll, { passive: false })\n    return () => window.removeEventListener('wheel', preventMouseScroll)\n  }, [isDisabled])\n}\n\ninterface TourStepConfig {\n  id: string;\n  title: string;\n  content: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  order: number;\n}\n\ninterface TourProviderProps {\n  children: ReactNode;\n  autoStart?: boolean;\n  ranOnce?: boolean;\n  storageKey?: string;\n  shouldStart?: boolean;\n  onTourComplete?: () => void;\n  onTourSkip?: () => void;\n}\n\ninterface TourContextType {\n  registerStep: (stepConfig: TourStepConfig, element: HTMLElement) => void;\n  unregisterStep: (id: string) => void;\n  startTour: () => void;\n  stopTour: () => void;\n  nextStep: () => void;\n  prevStep: () => void;\n  resetTourCompletion: () => void;\n  isActive: boolean;\n  currentStepId: string | null;\n  currentStepIndex: number;\n  totalSteps: number;\n}\n\nconst TourContext = createContext<TourContextType | null>(null);\n\nexport const useTour = () => {\n  const context = useContext(TourContext);\n  if (!context) {\n    throw new Error('useTour must be used within a TourProvider');\n  }\n  return context;\n};\n\nconst TourOverlay: React.FC = () => {\n  const { isActive, currentStepId } = useTour()\n  const [highlightStyle, setHighlightStyle] = useState<React.CSSProperties>({})\n  const rafRef = useRef<number | undefined>(undefined)\n\n  useDisableMouseScroll(isActive)\n\n  const updateHighlight = useCallback(() => {\n    if (!isActive || !currentStepId) return\n\n    const stepElement = document.querySelector(`[data-tour-step=\"${currentStepId}\"]`) as HTMLElement\n    if (!stepElement) return\n\n    const rect = stepElement.getBoundingClientRect()\n    const padding = 8\n\n    setHighlightStyle({\n      transform: `translate(${rect.left - padding}px, ${rect.top - padding}px)`,\n      width: rect.width + padding * 2,\n      height: rect.height + padding * 2,\n    })\n  }, [isActive, currentStepId])\n\n  useEffect(() => {\n    if (!isActive || !currentStepId) {\n      setHighlightStyle({})\n      return\n    }\n\n    updateHighlight()\n\n    const handleUpdate = () => {\n      if (rafRef.current) cancelAnimationFrame(rafRef.current)\n      rafRef.current = requestAnimationFrame(updateHighlight)\n    }\n\n    window.addEventListener('scroll', handleUpdate, { passive: true })\n    window.addEventListener('resize', handleUpdate, { passive: true })\n\n    return () => {\n      window.removeEventListener('scroll', handleUpdate)\n      window.removeEventListener('resize', handleUpdate)\n      if (rafRef.current) cancelAnimationFrame(rafRef.current)\n    }\n  }, [isActive, currentStepId, updateHighlight])\n\n  if (!isActive || !highlightStyle.width) return null\n\n  return (\n    <div className=\"fixed inset-0 z-10000 pointer-events-auto\">\n      <div className=\"fixed inset-0 bg-black/30 z-10001 backdrop-blur-xs pointer-events-auto\" />\n      <div\n        className=\"absolute rounded-xl pointer-events-none transition-all duration-300 ease-out\"\n        style={highlightStyle}\n      />\n    </div>\n  )\n}\n\nconst GlobalTourPopover: React.FC = () => {\n  const {\n    isActive,\n    currentStepId,\n    currentStepIndex,\n    totalSteps,\n    nextStep,\n    prevStep,\n    stopTour\n  } = useTour()\n\n  const [currentStepData, setCurrentStepData] = useState<TourStepConfig | null>(null)\n  const [popoverStyle, setPopoverStyle] = useState<React.CSSProperties>({})\n  const popoverRef = useRef<HTMLDivElement>(null)\n  const rafRef = useRef<number | undefined>(undefined)\n\n  const updatePosition = useCallback(() => {\n    if (!isActive || !currentStepId || !popoverRef.current) return\n\n    const stepElement = document.querySelector(`[data-tour-step=\"${currentStepId}\"]`) as HTMLElement\n    if (!stepElement) return\n\n    const stepData = JSON.parse(stepElement.getAttribute('data-tour-config') || '{}')\n    const targetRect = stepElement.getBoundingClientRect()\n    const popoverRect = popoverRef.current.getBoundingClientRect()\n\n    const margin = 16\n    const viewportWidth = window.innerWidth\n    const viewportHeight = window.innerHeight\n\n    let top = targetRect.bottom + margin\n    let left = targetRect.left + (targetRect.width / 2) - (popoverRect.width / 2)\n\n    if (stepData.position === 'top') {\n      top = targetRect.top - popoverRect.height - margin\n    } else if (stepData.position === 'left') {\n      top = targetRect.top + (targetRect.height / 2) - (popoverRect.height / 2)\n      left = targetRect.left - popoverRect.width - margin\n    } else if (stepData.position === 'right') {\n      top = targetRect.top + (targetRect.height / 2) - (popoverRect.height / 2)\n      left = targetRect.right + margin\n    }\n\n    top = Math.max(margin, Math.min(top, viewportHeight - popoverRect.height - margin))\n    left = Math.max(margin, Math.min(left, viewportWidth - popoverRect.width - margin))\n\n    setPopoverStyle({\n      position: 'fixed',\n      top,\n      left,\n      zIndex: 10003,\n    })\n  }, [isActive, currentStepId])\n\n  useEffect(() => {\n    if (!isActive || !currentStepId) {\n      setCurrentStepData(null)\n      setPopoverStyle({})\n      return\n    }\n\n    const stepElement = document.querySelector(`[data-tour-step=\"${currentStepId}\"]`) as HTMLElement\n    if (!stepElement) return\n\n    const stepData = JSON.parse(stepElement.getAttribute('data-tour-config') || 'null')\n    setCurrentStepData(stepData)\n\n    stepElement.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'nearest'\n    })\n\n    const handleUpdate = () => {\n      if (rafRef.current) cancelAnimationFrame(rafRef.current)\n      rafRef.current = requestAnimationFrame(updatePosition)\n    }\n\n    setTimeout(updatePosition, 100)\n\n    window.addEventListener('scroll', handleUpdate, { passive: true })\n    window.addEventListener('resize', handleUpdate, { passive: true })\n\n    return () => {\n      window.removeEventListener('scroll', handleUpdate)\n      window.removeEventListener('resize', handleUpdate)\n      if (rafRef.current) cancelAnimationFrame(rafRef.current)\n    }\n  }, [isActive, currentStepId, updatePosition])\n\n  if (!currentStepData) return null\n\n  const isLastStep = currentStepIndex === totalSteps - 1\n  const isFirstStep = currentStepIndex === 0\n\n  return (\n    <div\n      ref={popoverRef}\n      className=\"w-80 transition-all duration-300 ease-out\"\n      style={popoverStyle}\n    >\n      <Card className=\"border-2 border-primary/20 backdrop-blur-xs shadow-2xl\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground text-xs flex items-center justify-center font-semibold\">\n                {currentStepIndex + 1}\n              </div>\n              <CardTitle className=\"text-lg\">{currentStepData.title}</CardTitle>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={stopTour}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-1.5\">\n            <div\n              className=\"bg-primary h-1.5 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStepIndex + 1) / totalSteps) * 100}%` }}\n            />\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <CardDescription className=\"text-sm leading-relaxed mb-4\">\n            {currentStepData.content}\n          </CardDescription>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex gap-2 ml-auto\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={stopTour}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                Skip Tour\n              </Button>\n              {!isFirstStep && (\n                <Button variant=\"outline\" size=\"sm\" onClick={prevStep}>\n                  <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                  Back\n                </Button>\n              )}\n              <Button size=\"sm\" onClick={nextStep}>\n                {isLastStep ? 'Finish' : 'Next'}\n                {!isLastStep && <ChevronRight className=\"h-4 w-4 ml-1\" />}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport const TourProvider: React.FC<TourProviderProps> = ({\n  children,\n  autoStart = false,\n  ranOnce = true,\n  storageKey = 'rigidui-tour-completed',\n  shouldStart = true,\n  onTourComplete,\n  onTourSkip\n}) => {\n  const [steps, setSteps] = useState<Map<string, TourStepConfig & { element: HTMLElement }>>(new Map());\n  const [isActive, setIsActive] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [activeSteps, setActiveSteps] = useState<Array<TourStepConfig & { element: HTMLElement }>>([]);\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  const registerStep = useCallback((stepConfig: TourStepConfig, element: HTMLElement) => {\n    setSteps(prev => {\n      const newSteps = new Map(prev);\n      newSteps.set(stepConfig.id, { ...stepConfig, element });\n      return newSteps;\n    });\n  }, []);\n\n  const unregisterStep = useCallback((id: string) => {\n    setSteps(prev => {\n      const newSteps = new Map(prev);\n      newSteps.delete(id);\n      return newSteps;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (autoStart && !hasAutoStarted && steps.size > 0 && shouldStart) {\n      const tourCompleted = ranOnce ? localStorage.getItem(storageKey) === 'true' : false;\n\n      if (!tourCompleted) {\n        const timer = setTimeout(() => {\n          const filteredSteps = Array.from(steps.values())\n            .sort((a, b) => a.order - b.order);\n\n          if (filteredSteps.length > 0) {\n            setActiveSteps(filteredSteps);\n            setCurrentStep(0);\n            setIsActive(true);\n          }\n          setHasAutoStarted(true);\n        }, 500);\n        return () => clearTimeout(timer);\n      } else {\n        setHasAutoStarted(true);\n      }\n    }\n  }, [autoStart, hasAutoStarted, steps, ranOnce, storageKey, shouldStart]);\n\n  const startTour = useCallback(() => {\n    const filteredSteps = Array.from(steps.values())\n      .sort((a, b) => a.order - b.order)\n\n    if (filteredSteps.length > 0) {\n      setActiveSteps(filteredSteps)\n      setCurrentStep(0)\n      setIsActive(true)\n    }\n  }, [steps])\n\n  const stopTour = useCallback((completed = false) => {\n    const wasActive = isActive\n\n    setIsActive(false)\n    setCurrentStep(0)\n    setActiveSteps([])\n\n    if (wasActive) {\n      if (completed) {\n        if (ranOnce) {\n          localStorage.setItem(storageKey, 'true')\n        }\n        onTourComplete?.()\n        window.dispatchEvent(new CustomEvent('tourCompleted', { detail: { storageKey } }))\n      } else if (!completed) {\n        onTourSkip?.()\n      }\n    }\n  }, [isActive, ranOnce, storageKey, onTourComplete, onTourSkip])\n\n  const nextStep = useCallback(() => {\n    if (currentStep < activeSteps.length - 1) {\n      setCurrentStep(prev => prev + 1)\n    } else {\n      stopTour(true)\n    }\n  }, [currentStep, activeSteps.length, stopTour])\n\n  const prevStep = useCallback(() => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1)\n    }\n  }, [currentStep])\n\n  const resetTourCompletion = useCallback(() => {\n    if (ranOnce) {\n      localStorage.removeItem(storageKey)\n      setHasAutoStarted(false)\n      window.dispatchEvent(new CustomEvent('tourReset', { detail: { storageKey } }))\n    }\n  }, [ranOnce, storageKey])\n\n  const contextValue = useMemo(() => ({\n    registerStep,\n    unregisterStep,\n    startTour,\n    stopTour: () => stopTour(false),\n    nextStep,\n    prevStep,\n    resetTourCompletion,\n    isActive,\n    currentStepId: activeSteps[currentStep]?.id || null,\n    currentStepIndex: currentStep,\n    totalSteps: activeSteps.length\n  }), [\n    registerStep,\n    unregisterStep,\n    startTour,\n    stopTour,\n    nextStep,\n    prevStep,\n    resetTourCompletion,\n    isActive,\n    activeSteps,\n    currentStep\n  ])\n\n  return (\n    <TourContext.Provider value={contextValue}>\n      {children}\n      <TourOverlay />\n      <GlobalTourPopover />\n    </TourContext.Provider>\n  )\n}\n\nconst TourStepComponent: React.FC<{\n  id: string\n  title: string\n  content: string\n  order: number\n  position?: 'top' | 'bottom' | 'left' | 'right'\n  children: ReactNode\n}> = ({ children, id, title, content, order, position }) => {\n  const { registerStep, unregisterStep, isActive, currentStepId } = useTour()\n  const elementRef = useRef<HTMLDivElement>(null)\n\n  const stepConfig = useMemo(() => ({ id, title, content, order, position }), [id, title, content, order, position])\n\n  useEffect(() => {\n    if (elementRef.current) {\n      registerStep(stepConfig, elementRef.current)\n    }\n    return () => unregisterStep(id)\n  }, [stepConfig, registerStep, unregisterStep, id])\n\n  const isCurrentStep = isActive && currentStepId === id\n\n  return (\n    <div\n      ref={elementRef}\n      data-tour-step={id}\n      data-tour-config={JSON.stringify(stepConfig)}\n      className={isCurrentStep ? \"relative z-10002\" : \"relative\"}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport const TourStep = React.memo(TourStepComponent)\n\nexport const TourTrigger: React.FC<{\n  children: ReactNode\n  className?: string\n  hideAfterComplete?: boolean\n  storageKey?: string\n}> = ({ children, className, hideAfterComplete = false, storageKey = 'rigidui-tour-completed' }) => {\n  const { startTour } = useTour()\n  const [tourCompleted, setTourCompleted] = useState(() =>\n    hideAfterComplete ? localStorage.getItem(storageKey) === 'true' : false\n  )\n\n  useEffect(() => {\n    if (!hideAfterComplete) return\n\n    const handleTourComplete = (event: Event) => {\n      const customEvent = event as CustomEvent\n      const eventStorageKey = customEvent.detail?.storageKey || 'rigidui-tour-completed'\n      if (eventStorageKey === storageKey) {\n        localStorage.setItem(storageKey, 'true')\n        setTourCompleted(true)\n      }\n    }\n\n    const handleTourReset = (event: Event) => {\n      const customEvent = event as CustomEvent\n      const eventStorageKey = customEvent.detail?.storageKey || 'rigidui-tour-completed'\n      if (eventStorageKey === storageKey) {\n        setTourCompleted(false)\n      }\n    }\n\n    window.addEventListener('tourCompleted', handleTourComplete)\n    window.addEventListener('tourReset', handleTourReset)\n\n    return () => {\n      window.removeEventListener('tourCompleted', handleTourComplete)\n      window.removeEventListener('tourReset', handleTourReset)\n    }\n  }, [hideAfterComplete, storageKey])\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    e.preventDefault()\n    startTour()\n  }, [startTour])\n\n  if (hideAfterComplete && tourCompleted) return null\n\n  return (\n    <div onClick={handleClick} className={className}>\n      {children}\n    </div>\n  )\n}\n\nexport default TourProvider;\n",
      "type": "registry:component"
    }
  ]
}