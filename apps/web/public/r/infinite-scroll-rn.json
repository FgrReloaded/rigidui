{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "infinite-scroll-rn",
  "type": "registry:component",
  "title": "Infinite Scroll",
  "author": "Nitish Singh <devxnitish@gmail.com",
  "description": "An infinite scroll component for react native",
  "files": [
    {
      "path": "r/new-york/infinite-scroll/infinite-scroll-rn.tsx",
      "content": "import React, { useCallback, useRef, useState } from 'react'\nimport { FlatList, View, Text, ActivityIndicator } from 'react-native'\nimport { cn } from '@/lib/utils'\n\nconst DefaultLoader = () => (\n  <View className=\"flex justify-center py-4\">\n    <ActivityIndicator size=\"small\" />\n  </View>\n)\n\nconst DefaultEndMessage = () => (\n  <View className=\"text-center py-4\">\n    <Text className=\"text-muted-foreground\">No more items to load</Text>\n  </View>\n)\n\ninterface InfiniteScrollProps<T> {\n  items: T[]\n  hasNextPage: boolean\n  isLoading: boolean\n  onLoadMore: () => void | Promise<void>\n  threshold?: number\n  loader?: React.ComponentType\n  endMessage?: React.ReactNode\n  errorMessage?: React.ReactNode\n  renderItem: (item: T, index?: number) => React.ReactNode\n  className?: string\n  itemClassName?: string\n  reverse?: boolean\n  initialLoad?: boolean\n  estimateSize?: number\n  keyExtractor?: (item: T, index: number) => string\n}\n\nexport function InfiniteScroll<T>({\n  items,\n  hasNextPage,\n  isLoading,\n  onLoadMore,\n  threshold = 0.5,\n  loader: Loader = DefaultLoader,\n  endMessage = <DefaultEndMessage />,\n  errorMessage,\n  renderItem,\n  className,\n  itemClassName,\n  reverse = false,\n  initialLoad = false,\n  estimateSize = 50,\n  keyExtractor,\n}: InfiniteScrollProps<T>) {\n  const [internalLoading, setInternalLoading] = useState(false)\n  const flatListRef = useRef<FlatList>(null)\n\n  const handleLoadMore = useCallback(() => {\n    if (internalLoading || !hasNextPage || isLoading) return\n\n    setInternalLoading(true)\n    Promise.resolve(onLoadMore()).finally(() => {\n      setInternalLoading(false)\n    })\n  }, [hasNextPage, isLoading, internalLoading, onLoadMore])\n\n  const defaultKeyExtractor = useCallback(\n    (_item: T, index: number) => index.toString(),\n    []\n  )\n\n  const renderItemWrapper = useCallback(\n    ({ item, index }: { item: T; index: number }) => (\n      <View className={cn(itemClassName)}>\n        {renderItem(item, index)}\n      </View>\n    ),\n    [renderItem, itemClassName]\n  )\n\n  const renderFooter = useCallback(() => {\n    if (isLoading || internalLoading) {\n      return <Loader />\n    }\n\n    if (!hasNextPage && items.length > 0) {\n      return <>{endMessage}</>\n    }\n\n    return null\n  }, [isLoading, internalLoading, hasNextPage, items.length, endMessage, Loader])\n\n  const renderEmpty = useCallback(() => {\n    if (isLoading || internalLoading) {\n      return null\n    }\n\n    return (\n      <View className=\"flex justify-center items-center py-8\">\n        <Text className=\"text-muted-foreground\">No items found</Text>\n      </View>\n    )\n  }, [isLoading, internalLoading])\n\n  return (\n    <View className={cn(\"flex-1\", className)}>\n      <FlatList\n        ref={flatListRef}\n        data={items}\n        renderItem={renderItemWrapper}\n        keyExtractor={keyExtractor || defaultKeyExtractor}\n        onEndReached={handleLoadMore}\n        onEndReachedThreshold={threshold}\n        ListFooterComponent={renderFooter}\n        ListEmptyComponent={renderEmpty}\n        inverted={reverse}\n        getItemLayout={\n          estimateSize\n            ? (_data, index) => ({\n              length: estimateSize,\n              offset: estimateSize * index,\n              index,\n            })\n            : undefined\n        }\n        initialNumToRender={10}\n        maxToRenderPerBatch={10}\n        windowSize={5}\n        removeClippedSubviews={true}\n        contentContainerStyle={\n          items.length === 0 ? { flexGrow: 1 } : { paddingBottom: 16 }\n        }\n      />\n      {errorMessage && (\n        <View className=\"text-center py-4\">\n          <Text className=\"text-destructive\">{errorMessage}</Text>\n        </View>\n      )}\n    </View>\n  )\n}\n\nexport type { InfiniteScrollProps }\n\n",
      "type": "registry:component"
    }
  ]
}