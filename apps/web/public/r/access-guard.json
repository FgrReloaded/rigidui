{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "access-guard",
  "type": "registry:component",
  "title": "Access Guard",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A comprehensive access based control system with session validation",
  "registryDependencies": [
    "button",
    "card",
    "badge"
  ],
  "files": [
    {
      "path": "r/new-york/access-guard/access-guard.tsx",
      "content": "\"use client\"\n\nimport React, { createContext, useContext, useMemo, ReactNode } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface UserSession {\n  id: string\n  email?: string\n  username?: string\n  name?: string\n  avatar?: string\n  roles: string[]\n  permissions: string[]\n  metadata?: Record<string, unknown>\n  isActive?: boolean\n  expiresAt?: Date | string\n  lastActivity?: Date | string\n  sessionId?: string\n}\n\nexport interface RolePermissionMap {\n  [role: string]: string[]\n}\n\nexport interface AccessGuardContextType {\n  user: UserSession | null\n  rolePermissionMap: RolePermissionMap\n  hasRole: (role: string | string[]) => boolean\n  hasPermission: (permission: string | string[]) => boolean\n  hasAnyRole: (roles: string[]) => boolean\n  hasAllRoles: (roles: string[]) => boolean\n  hasAnyPermission: (permissions: string[]) => boolean\n  hasAllPermissions: (permissions: string[]) => boolean\n  isSessionValid: () => boolean\n  getSessionTimeRemaining: () => number | null\n  isSessionExpiring: (thresholdMinutes?: number) => boolean\n}\n\nconst AccessGuardContext = createContext<AccessGuardContextType | null>(null)\n\nexport const useAccessGuard = () => {\n  const context = useContext(AccessGuardContext)\n  if (!context) {\n    throw new Error('useAccessGuard must be used within an AccessGuardProvider')\n  }\n  return context\n}\n\nexport const useRoleBasedAccess = useAccessGuard\n\nexport interface AccessGuardProviderProps {\n  children: ReactNode\n  user: UserSession | null\n  rolePermissionMap?: RolePermissionMap\n  onUnauthorized?: () => void\n}\n\nexport function AccessGuardProvider({\n  children,\n  user,\n  rolePermissionMap = {}\n}: AccessGuardProviderProps) {\n  const contextValue = useMemo(() => {\n    const hasRole = (role: string | string[]): boolean => {\n      if (!user || !user.roles) return false\n      if (Array.isArray(role)) {\n        return role.some(r => user.roles.includes(r))\n      }\n      return user.roles.includes(role)\n    }\n\n    const hasPermission = (permission: string | string[]): boolean => {\n      if (!user) return false\n\n      const userPermissions = new Set([\n        ...(user.permissions || []),\n        ...user.roles.flatMap(role => rolePermissionMap[role] || [])\n      ])\n\n      if (Array.isArray(permission)) {\n        return permission.some(p => userPermissions.has(p))\n      }\n      return userPermissions.has(permission)\n    }\n\n    const hasAnyRole = (roles: string[]): boolean => {\n      if (!user || !user.roles) return false\n      return roles.some(role => user.roles.includes(role))\n    }\n\n    const hasAllRoles = (roles: string[]): boolean => {\n      if (!user || !user.roles) return false\n      return roles.every(role => user.roles.includes(role))\n    }\n\n    const hasAnyPermission = (permissions: string[]): boolean => {\n      if (!user) return false\n\n      const userPermissions = new Set([\n        ...(user.permissions || []),\n        ...user.roles.flatMap(role => rolePermissionMap[role] || [])\n      ])\n\n      return permissions.some(permission => userPermissions.has(permission))\n    }\n\n    const hasAllPermissions = (permissions: string[]): boolean => {\n      if (!user) return false\n\n      const userPermissions = new Set([\n        ...(user.permissions || []),\n        ...user.roles.flatMap(role => rolePermissionMap[role] || [])\n      ])\n\n      return permissions.every(permission => userPermissions.has(permission))\n    }\n\n    const isSessionValid = (): boolean => {\n      if (!user) return false\n      if (user.isActive === false) return false\n\n      if (user.expiresAt) {\n        const expirationDate = typeof user.expiresAt === 'string'\n          ? new Date(user.expiresAt)\n          : user.expiresAt\n        return expirationDate > new Date()\n      }\n\n      return true\n    }\n\n    const getSessionTimeRemaining = (): number | null => {\n      if (!user || !user.expiresAt) return null\n\n      const expirationDate = typeof user.expiresAt === 'string'\n        ? new Date(user.expiresAt)\n        : user.expiresAt\n\n      const now = new Date()\n      const timeRemaining = expirationDate.getTime() - now.getTime()\n\n      return timeRemaining > 0 ? timeRemaining : 0\n    }\n\n    const isSessionExpiring = (thresholdMinutes: number = 5): boolean => {\n      if (!user || !user.expiresAt) return false\n\n      const expirationDate = typeof user.expiresAt === 'string'\n        ? new Date(user.expiresAt)\n        : user.expiresAt\n\n      const now = new Date()\n      const timeUntilExpiry = expirationDate.getTime() - now.getTime()\n      const thresholdMs = thresholdMinutes * 60 * 1000\n\n      return timeUntilExpiry > 0 && timeUntilExpiry <= thresholdMs\n    }\n\n    return {\n      user,\n      rolePermissionMap,\n      hasRole,\n      hasPermission,\n      hasAnyRole,\n      hasAllRoles,\n      hasAnyPermission,\n      hasAllPermissions,\n      isSessionValid,\n      getSessionTimeRemaining,\n      isSessionExpiring\n    }\n  }, [user, rolePermissionMap])\n\n  return (\n    <AccessGuardContext.Provider value={contextValue}>\n      {children}\n    </AccessGuardContext.Provider>\n  )\n}\n\nexport interface AccessGateProps {\n  children: ReactNode\n  roles?: string | string[]\n  permissions?: string | string[]\n  requireAllRoles?: boolean\n  requireAllPermissions?: boolean\n  requireValidSession?: boolean\n  fallback?: ReactNode\n  onUnauthorized?: () => void\n  mode?: 'hide' | 'disable' | 'show-fallback'\n  className?: string\n  disabledClassName?: string\n}\n\nexport function AccessGate({\n  children,\n  roles,\n  permissions,\n  requireAllRoles = false,\n  requireAllPermissions = false,\n  requireValidSession = true,\n  fallback = null,\n  onUnauthorized,\n  mode = 'hide',\n  className,\n  disabledClassName\n}: AccessGateProps) {\n  const {\n    hasRole,\n    hasPermission,\n    hasAllRoles,\n    hasAllPermissions,\n    isSessionValid\n  } = useAccessGuard()\n\n  const checkAccess = (): boolean => {\n    if (requireValidSession && !isSessionValid()) {\n      return false\n    }\n\n    let hasRequiredRoles = true\n    let hasRequiredPermissions = true\n\n    if (roles) {\n      const roleArray = Array.isArray(roles) ? roles : [roles]\n      hasRequiredRoles = requireAllRoles\n        ? hasAllRoles(roleArray)\n        : hasRole(roles)\n    }\n\n    if (permissions) {\n      const permissionArray = Array.isArray(permissions) ? permissions : [permissions]\n      hasRequiredPermissions = requireAllPermissions\n        ? hasAllPermissions(permissionArray)\n        : hasPermission(permissions)\n    }\n\n    return hasRequiredRoles && hasRequiredPermissions\n  }\n\n  const hasAccess = checkAccess()\n\n  if (!hasAccess && onUnauthorized) {\n    onUnauthorized()\n  }\n\n  if (!hasAccess) {\n    switch (mode) {\n      case 'hide':\n        return fallback ? <>{fallback}</> : null\n      case 'show-fallback':\n        return fallback ? <>{fallback}</> : null\n      case 'disable':\n        return (\n          <div className={cn(className, disabledClassName, \"opacity-50 pointer-events-none cursor-not-allowed\")}>\n            {children}\n          </div>\n        )\n      default:\n        return null\n    }\n  }\n\n  return <div className={className}>{children}</div>\n}\n\nexport interface PermissionCheckProps {\n  roles?: string | string[]\n  permissions?: string | string[]\n  requireAllRoles?: boolean\n  requireAllPermissions?: boolean\n  requireValidSession?: boolean\n}\n\nexport function usePermissionCheck({\n  roles,\n  permissions,\n  requireAllRoles = false,\n  requireAllPermissions = false,\n  requireValidSession = true\n}: PermissionCheckProps = {}) {\n  const {\n    hasRole,\n    hasPermission,\n    hasAllRoles,\n    hasAllPermissions,\n    isSessionValid\n  } = useAccessGuard()\n\n  return useMemo(() => {\n    if (requireValidSession && !isSessionValid()) {\n      return false\n    }\n\n    let hasRequiredRoles = true\n    let hasRequiredPermissions = true\n\n    if (roles) {\n      const roleArray = Array.isArray(roles) ? roles : [roles]\n      hasRequiredRoles = requireAllRoles\n        ? hasAllRoles(roleArray)\n        : hasRole(roles)\n    }\n\n    if (permissions) {\n      const permissionArray = Array.isArray(permissions) ? permissions : [permissions]\n      hasRequiredPermissions = requireAllPermissions\n        ? hasAllPermissions(permissionArray)\n        : hasPermission(permissions)\n    }\n\n    return hasRequiredRoles && hasRequiredPermissions\n  }, [\n    roles,\n    permissions,\n    requireAllRoles,\n    requireAllPermissions,\n    requireValidSession,\n    hasRole,\n    hasPermission,\n    hasAllRoles,\n    hasAllPermissions,\n    isSessionValid\n  ])\n}\n\nexport interface ConditionalWrapperProps {\n  children: ReactNode\n  roles?: string | string[]\n  permissions?: string | string[]\n  requireAllRoles?: boolean\n  requireAllPermissions?: boolean\n  requireValidSession?: boolean\n  wrapper: (children: ReactNode) => ReactNode\n  fallbackWrapper?: (children: ReactNode) => ReactNode\n}\n\nexport function ConditionalWrapper({\n  children,\n  roles,\n  permissions,\n  requireAllRoles = false,\n  requireAllPermissions = false,\n  requireValidSession = true,\n  wrapper,\n  fallbackWrapper\n}: ConditionalWrapperProps) {\n  const hasAccess = usePermissionCheck({\n    roles,\n    permissions,\n    requireAllRoles,\n    requireAllPermissions,\n    requireValidSession\n  })\n\n  if (hasAccess) {\n    return <>{wrapper(children)}</>\n  }\n\n  if (fallbackWrapper) {\n    return <>{fallbackWrapper(children)}</>\n  }\n\n  return <>{children}</>\n}\n\nexport interface SessionGuardProps {\n  children: ReactNode\n  fallback?: ReactNode\n  redirectTo?: string\n  onSessionExpired?: () => void\n}\n\nexport function SessionGuard({\n  children,\n  fallback,\n  redirectTo,\n  onSessionExpired\n}: SessionGuardProps) {\n  const { user, isSessionValid } = useAccessGuard()\n\n  const sessionValid = isSessionValid()\n\n  if (!user || !sessionValid) {\n    if (onSessionExpired) {\n      onSessionExpired()\n    }\n\n    if (redirectTo && typeof window !== 'undefined') {\n      window.location.href = redirectTo\n      return null\n    }\n\n    if (fallback) {\n      return <>{fallback}</>\n    }\n\n    return null\n  }\n\n  return <>{children}</>\n}\n\nexport const RoleBasedAccessProvider = AccessGuardProvider\nexport const RoleGate = AccessGate\n\nexport const RoleBasedAccess = {\n  Provider: AccessGuardProvider,\n  Gate: AccessGate,\n  SessionGuard,\n  ConditionalWrapper,\n  useRoleBasedAccess: useAccessGuard,\n  usePermissionCheck\n}\n",
      "type": "registry:component"
    }
  ]
}