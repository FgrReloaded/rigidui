{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-location",
  "type": "registry:hook",
  "title": "Use Location",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A custom hook to get the manage location",
  "files": [
    {
      "path": "r/new-york/use-location/use-location.ts",
      "content": "\n\"use client\"\n\nimport { useState, useCallback } from 'react'\n\nexport type LocationCoordinates = {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface UseLocationOptions {\n  apiUrl?: string;\n  geolocationOptions?: PositionOptions;\n}\n\nexport interface UseLocationReturn {\n  location: string;\n  coordinates: LocationCoordinates | null;\n  isLoading: boolean;\n  error: string | null;\n\n  getCurrentLocation: () => void;\n  getLocationFromCoordinates: (lat: number, lon: number) => Promise<void>;\n  clearLocation: () => void;\n}\n\nexport function useLocation(options: UseLocationOptions = {}): UseLocationReturn {\n  const {\n    apiUrl = \"https://nominatim.openstreetmap.org\",\n    geolocationOptions = { timeout: 10000, enableHighAccuracy: true },\n  } = options;\n\n  const [location, setLocation] = useState('');\n  const [coordinates, setCoordinates] = useState<LocationCoordinates | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getLocationFromCoordinates = useCallback(async (lat: number, lon: number) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`${apiUrl}/reverse?lat=${lat}&lon=${lon}&format=json`);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch location: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const locationName = data.address?.county || data.address?.city || data.address?.state || data.display_name || '';\n\n      setLocation(locationName);\n      setCoordinates({ latitude: lat, longitude: lon });\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get location from coordinates';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [apiUrl]);\n\n  const getCurrentLocation = useCallback(() => {\n    if (!navigator.geolocation) {\n      setError(\"Geolocation is not supported by this browser\");\n      return;\n    }\n\n    if (location) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        getLocationFromCoordinates(latitude, longitude);\n      },\n      (err) => {\n        let errorMessage = \"Unable to retrieve location\";\n\n        switch (err.code) {\n          case err.PERMISSION_DENIED:\n            errorMessage = \"Location access denied by user\";\n            break;\n          case err.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information unavailable\";\n            break;\n          case err.TIMEOUT:\n            errorMessage = \"Location request timed out\";\n            break;\n        }\n\n        setError(errorMessage);\n        setIsLoading(false);\n      },\n      geolocationOptions\n    );\n  }, [geolocationOptions, getLocationFromCoordinates, location]);\n\n\n  const clearLocation = useCallback(() => {\n    setLocation('');\n    setCoordinates(null);\n    setError(null);\n  }, []);\n\n  return {\n    location,\n    coordinates,\n    isLoading,\n    error,\n    getCurrentLocation,\n    getLocationFromCoordinates,\n    clearLocation,\n  };\n}",
      "type": "registry:hook"
    }
  ]
}