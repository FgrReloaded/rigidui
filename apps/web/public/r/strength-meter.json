{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "strength-meter",
  "type": "registry:component",
  "title": "Strength Meter",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A password strength meter component",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "r/new-york/strength-meter/strength-meter.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Eye, EyeOff, Check, X, RefreshCw } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\n\nexport type StrengthLevel = \"empty\" | \"weak\" | \"fair\" | \"good\" | \"strong\"\n\nexport interface PasswordStrengthRequirement {\n  label: string\n  validator: (password: string) => boolean\n}\n\nexport interface StrengthMeterTheme {\n  container?: string\n  input?: string\n  inputContainer?: string\n  meterContainer?: string\n  meterSegment?: string\n  strengthText?: string\n  requirementsContainer?: string\n  requirementItem?: string\n  requirementIcon?: string\n  requirementText?: string\n  strengthColors?: {\n    empty?: string\n    weak?: string\n    fair?: string\n    good?: string\n    strong?: string\n  }\n}\n\nexport interface PasswordStrengthMeterProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  value?: string\n  onValueChange?: (value: string) => void\n  showText?: boolean\n  showRequirements?: boolean\n  segments?: number\n  strengthThresholds?: Record<StrengthLevel, number>\n  requirements?: PasswordStrengthRequirement[]\n  customCalculateStrength?: (password: string) => number\n  showPasswordToggle?: boolean\n  strengthLabels?: Record<StrengthLevel, string>\n  className?: string\n  meterClassName?: string\n  inputClassName?: string\n  placeholder?: string\n  enableAutoGenerate?: boolean\n  autoGenerateLength?: number\n  theme?: StrengthMeterTheme\n}\n\nconst defaultRequirements: PasswordStrengthRequirement[] = [\n  {\n    label: \"At least 8 characters\",\n    validator: (password) => password.length >= 8,\n  },\n  {\n    label: \"At least one lowercase letter\",\n    validator: (password) => /[a-z]/.test(password),\n  },\n  {\n    label: \"At least one uppercase letter\",\n    validator: (password) => /[A-Z]/.test(password),\n  },\n  {\n    label: \"At least one number\",\n    validator: (password) => /\\d/.test(password),\n  },\n  {\n    label: \"At least one special character\",\n    validator: (password) => /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n  },\n]\n\nconst defaultStrengthLabels = {\n  empty: \"Empty\",\n  weak: \"Weak\",\n  fair: \"Fair\",\n  good: \"Good\",\n  strong: \"Strong\",\n}\n\nconst defaultStrengthThresholds = {\n  empty: 0,\n  weak: 1,\n  fair: 40,\n  good: 70,\n  strong: 90,\n}\n\nconst defaultTheme: StrengthMeterTheme = {\n  container: \"space-y-3\",\n  inputContainer: \"relative\",\n  input: \"pr-20 border-border focus:border-primary focus:ring-primary/20 bg-background text-foreground\",\n  meterContainer: \"w-full h-2 rounded-full bg-muted flex gap-1 overflow-hidden\",\n  meterSegment: \"h-full rounded-sm transition-all duration-300 ease-in-out flex-1\",\n  strengthText: \"text-sm font-medium\",\n  requirementsContainer: \"space-y-2\",\n  requirementItem: \"flex items-center gap-2 text-sm\",\n  requirementIcon: \"h-4 w-4 shrink-0\",\n  requirementText: \"text-muted-foreground\",\n  strengthColors: {\n    empty: \"bg-transparent\",\n    weak: \"bg-red-500 dark:bg-red-600\",\n    fair: \"bg-amber-500 dark:bg-amber-600\",\n    good: \"bg-blue-500 dark:bg-blue-600\",\n    strong: \"bg-emerald-500 dark:bg-emerald-600\"\n  }\n}\n\nexport function PasswordStrengthMeter({\n  value = \"\",\n  onValueChange,\n  showText = true,\n  showRequirements = true,\n  segments = 4,\n  strengthThresholds = defaultStrengthThresholds,\n  requirements = defaultRequirements,\n  customCalculateStrength,\n  showPasswordToggle = true,\n  strengthLabels = defaultStrengthLabels,\n  className,\n  meterClassName,\n  inputClassName,\n  placeholder = \"Enter password\",\n  enableAutoGenerate = false,\n  autoGenerateLength = 10,\n  theme,\n  ...props\n}: PasswordStrengthMeterProps) {\n  const [password, setPassword] = React.useState(value)\n  const [showPassword, setShowPassword] = React.useState(false)\n\n  const appliedTheme = { ...defaultTheme, ...theme }\n\n  React.useEffect(() => {\n    setPassword(value)\n  }, [value])\n\n  const generateStrongPassword = (length: number = autoGenerateLength): string => {\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const specialChars = '!@#$%^&*(),.?\":{}|<>'\n\n    const allChars = lowercase + uppercase + numbers + specialChars\n\n    let password = ''\n\n    password += lowercase[Math.floor(Math.random() * lowercase.length)]\n    password += uppercase[Math.floor(Math.random() * uppercase.length)]\n    password += numbers[Math.floor(Math.random() * numbers.length)]\n    password += specialChars[Math.floor(Math.random() * specialChars.length)]\n\n    for (let i = 4; i < length; i++) {\n      password += allChars[Math.floor(Math.random() * allChars.length)]\n    }\n\n    return password.split('').sort(() => Math.random() - 0.5).join('')\n  }\n\n  const handleGeneratePassword = () => {\n    const newPassword = generateStrongPassword(autoGenerateLength)\n    setPassword(newPassword)\n    onValueChange?.(newPassword)\n  }\n\n  const calculateBaseStrength = (password: string): number => {\n    if (!password) return 0\n\n    let score = 0\n    let passedRequirements = 0\n\n    requirements.forEach((requirement) => {\n      if (requirement.validator(password)) {\n        passedRequirements++\n      }\n    })\n\n    score = (passedRequirements / requirements.length) * 100\n\n    if (password.length > 12) score += 10\n    if (password.length > 16) score += 10\n    if (/[!@#$%^&*(),.?\":{}|<>]{2,}/.test(password)) score += 10\n\n    return Math.min(score, 100)\n  }\n\n  const calculateStrength = customCalculateStrength || calculateBaseStrength\n  const strengthScore = calculateStrength(password)\n\n  const getStrengthLevel = (): StrengthLevel => {\n    if (strengthScore >= strengthThresholds.strong) return \"strong\"\n    if (strengthScore >= strengthThresholds.good) return \"good\"\n    if (strengthScore >= strengthThresholds.fair) return \"fair\"\n    if (strengthScore >= strengthThresholds.weak) return \"weak\"\n    return \"empty\"\n  }\n\n  const strengthLevel = getStrengthLevel()\n\n  const getSegmentStrength = (index: number): StrengthLevel => {\n    const segmentThreshold = (index + 1) * (100 / segments)\n\n    if (strengthScore >= segmentThreshold) {\n      if (strengthLevel === \"strong\") return \"strong\"\n      if (strengthLevel === \"good\") return \"good\"\n      if (strengthLevel === \"fair\") return \"fair\"\n      if (strengthLevel === \"weak\") return \"weak\"\n    }\n\n    return \"empty\"\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setPassword(newValue)\n    onValueChange?.(newValue)\n  }\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword)\n  }\n\n  const getPassedRequirements = (): PasswordStrengthRequirement[] => {\n    return requirements.filter((requirement) => requirement.validator(password))\n  }\n\n  const getStrengthColor = (): string => {\n    if (!appliedTheme.strengthColors) {\n      switch (strengthLevel) {\n        case \"strong\": return \"text-emerald-500\"\n        case \"good\": return \"text-blue-500\"\n        case \"fair\": return \"text-amber-500\"\n        case \"weak\": return \"text-red-500\"\n        default: return \"text-muted-foreground\"\n      }\n    }\n\n    switch (strengthLevel) {\n      case \"strong\": return \"text-emerald-500 dark:text-emerald-400\"\n      case \"good\": return \"text-blue-500 dark:text-blue-400\"\n      case \"fair\": return \"text-amber-500 dark:text-amber-400\"\n      case \"weak\": return \"text-red-500 dark:text-red-400\"\n      default: return \"text-muted-foreground\"\n    }\n  }\n\n  const getSegmentColor = (segmentStrength: StrengthLevel): string => {\n    return appliedTheme.strengthColors?.[segmentStrength] || appliedTheme.strengthColors?.empty || \"bg-transparent\"\n  }\n\n  return (\n    <div className={cn(appliedTheme.container, className)} {...props}>\n      <div className={cn(appliedTheme.inputContainer)}>\n        <Input\n          type={showPassword ? \"text\" : \"password\"}\n          value={password}\n          onChange={handleChange}\n          className={cn(appliedTheme.input, inputClassName)}\n          placeholder={placeholder}\n        />\n        <div className=\"absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2\">\n          {enableAutoGenerate && (\n            <button\n              type=\"button\"\n              onClick={handleGeneratePassword}\n              aria-label=\"Generate strong password\"\n              title=\"Generate strong password\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </button>\n          )}\n          {showPasswordToggle && (\n            <button\n              type=\"button\"\n              onClick={togglePasswordVisibility}\n              aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n            >\n              {showPassword ? (\n                <EyeOff className=\"h-4 w-4\" />\n              ) : (\n                <Eye className=\"h-4 w-4\" />\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className={cn(appliedTheme.meterContainer, meterClassName)}>\n        {Array.from({ length: segments }).map((_, i) => (\n          <div\n            key={i}\n            className={cn(\n              appliedTheme.meterSegment,\n              getSegmentColor(getSegmentStrength(i))\n            )}\n            style={{\n              transitionDelay: `${i * 75}ms`,\n            }}\n          />\n        ))}\n      </div>\n\n      {showText && password && (\n        <div className=\"flex items-center\">\n          <span className={cn(appliedTheme.strengthText, getStrengthColor())}>\n            {strengthLabels[strengthLevel]}\n          </span>\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            {getPassedRequirements().length} of {requirements.length} requirements met\n          </span>\n        </div>\n      )}\n\n      {showRequirements && (\n        <div className={cn(appliedTheme.requirementsContainer)}>\n          {enableAutoGenerate && (\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800 gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <RefreshCw className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                  Auto-generate strong password\n                </span>\n              </div>\n              <button\n                type=\"button\"\n                onClick={handleGeneratePassword}\n                className=\"px-3 py-1 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 dark:text-blue-300 dark:bg-blue-900 dark:hover:bg-blue-800 rounded-md transition-colors\"\n              >\n                Generate\n              </button>\n            </div>\n          )}\n          <ul className=\"space-y-2\">\n            {requirements.map((requirement, index) => {\n              const passed = requirement.validator(password)\n              return (\n                <li\n                  key={index}\n                  className={cn(appliedTheme.requirementItem)}\n                >\n                  {passed ? (\n                    <Check className={cn(appliedTheme.requirementIcon, \"text-emerald-500 dark:text-emerald-400\")} />\n                  ) : (\n                    <X className={cn(appliedTheme.requirementIcon, \"text-muted-foreground\")} />\n                  )}\n                  <span className={cn(\n                    appliedTheme.requirementText,\n                    passed ? \"text-foreground\" : \"text-muted-foreground\"\n                  )}>\n                    {requirement.label}\n                  </span>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}