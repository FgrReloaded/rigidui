{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "smart-form",
  "type": "registry:component",
  "title": "Smart Form",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A smart form component",
  "dependencies": [
    "react-hook-form",
    "zod",
    "@hookform/resolvers",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "button",
    "input",
    "select",
    "textarea",
    "checkbox",
    "radio-group",
    "card",
    "form"
  ],
  "files": [
    {
      "path": "registry/new-york/smart-form/smart-form.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport React from 'react'\nimport { useForm, UseFormReturn, FieldPath, FieldValues } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'\nimport { Loader2, CheckCircle, AlertCircle } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\nexport interface FormFieldOption {\n  value: string\n  label: string\n}\n\nexport interface SmartFormProps<T extends FieldValues = FieldValues> {\n  schema: z.ZodSchema<T>\n  mutationFn: (data: T) => Promise<any>\n  queryKey?: string[]\n  mode?: 'create' | 'edit'\n  defaultValues?: Partial<T>\n  onSuccess?: (data: any) => void\n  onError?: (error: Error) => void\n  submitText?: string\n  className?: string\n  children: (form: UseFormReturn<T>) => React.ReactNode\n}\n\nexport interface SmartFormFieldProps<T extends FieldValues = FieldValues> {\n  form: UseFormReturn<T>\n  name: FieldPath<T>\n  type: 'text' | 'email' | 'password' | 'number' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'color'\n  label?: string\n  placeholder?: string\n  description?: string\n  options?: FormFieldOption[]\n  disabled?: boolean\n  className?: string\n}\n\nexport interface FormSectionProps {\n  title: string\n  description?: string\n  children: React.ReactNode\n  className?: string\n}\n\nexport function SmartForm<T extends FieldValues>({\n  schema,\n  mutationFn,\n  queryKey = [],\n  mode = 'create',\n  defaultValues,\n  onSuccess,\n  onError,\n  submitText,\n  className,\n  children\n}: SmartFormProps<T>) {\n  const queryClient = useQueryClient()\n\n  const form = useForm<T>({\n    resolver: zodResolver(schema),\n    defaultValues: (defaultValues || {}) as any\n  })\n\n  const mutation = useMutation({\n    mutationFn,\n    onSuccess: (data) => {\n      if (queryKey.length > 0) {\n        queryClient.invalidateQueries({ queryKey })\n      }\n      form.reset()\n      onSuccess?.(data)\n    },\n    onError: (error) => {\n      onError?.(error instanceof Error ? error : new Error('Unknown error'))\n    }\n  })\n\n  const onSubmit = (data: T) => {\n    mutation.mutate(data)\n  }\n\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-6\">\n              {children(form)}\n            </div>\n\n            <div className=\"flex items-center justify-end pt-6 mt-6 border-t\">\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"min-w-32\"\n              >\n                {mutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    {mode === 'create' ? 'Creating...' : 'Updating...'}\n                  </>\n                ) : (\n                  <>\n                    {mutation.isSuccess ? (\n                      <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    ) : mutation.isError ? (\n                      <AlertCircle className=\"mr-2 h-4 w-4\" />\n                    ) : null}\n                    {submitText || (mode === 'create' ? 'Create' : 'Update')}\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </form>\n      </Form>\n    </Card>\n  )\n}\n\nexport function SmartFormField<T extends FieldValues>({\n  form,\n  name,\n  type,\n  label,\n  placeholder,\n  description,\n  options = [],\n  disabled,\n  className\n}: SmartFormFieldProps<T>) {\n  const renderField = (field: any) => {\n    switch (type) {\n      case 'text':\n      case 'email':\n      case 'password':\n        return (\n          <Input\n            type={type}\n            placeholder={placeholder}\n            disabled={disabled}\n            {...field}\n            value={field.value || ''}\n          />\n        )\n\n      case 'number':\n        return (\n          <Input\n            type=\"number\"\n            placeholder={placeholder}\n            disabled={disabled}\n            {...field}\n            value={field.value || ''}\n            onChange={(e) => {\n              const value = e.target.value\n              field.onChange(value === '' ? undefined : Number(value))\n            }}\n          />\n        )\n\n      case 'textarea':\n        return (\n          <Textarea\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={3}\n            {...field}\n            value={field.value || ''}\n          />\n        )\n\n      case 'select':\n        return (\n          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={disabled}>\n            <SelectTrigger>\n              <SelectValue placeholder={placeholder || `Select ${label}`} />\n            </SelectTrigger>\n            <SelectContent>\n              {options.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        )\n\n      case 'checkbox':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              checked={field.value || false}\n              onCheckedChange={field.onChange}\n              disabled={disabled}\n            />\n            <label className=\"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n              {label}\n            </label>\n          </div>\n        )\n\n      case 'radio':\n        return (\n          <RadioGroup onValueChange={field.onChange} defaultValue={field.value} disabled={disabled}>\n            {options.map((option) => (\n              <div key={option.value} className=\"flex items-center space-x-2\">\n                <RadioGroupItem value={option.value} id={`${name}-${option.value}`} />\n                <label\n                  htmlFor={`${name}-${option.value}`}\n                  className=\"text-sm font-normal cursor-pointer\"\n                >\n                  {option.label}\n                </label>\n              </div>\n            ))}\n          </RadioGroup>\n        )\n\n      case 'color':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              type=\"color\"\n              disabled={disabled}\n              className=\"w-12 h-10 p-1 border rounded\"\n              value={field.value || '#000000'}\n              onChange={(e) => field.onChange(e.target.value)}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"#000000\"\n              disabled={disabled}\n              className=\"flex-1\"\n              value={field.value || ''}\n              onChange={(e) => field.onChange(e.target.value)}\n            />\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  if (type === 'checkbox') {\n    return (\n      <FormField\n        control={form.control}\n        name={name}\n        render={({ field }) => (\n          <FormItem className={cn(\"space-y-2\", className)}>\n            <FormControl>\n              {renderField(field)}\n            </FormControl>\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    )\n  }\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && <FormLabel>{label}</FormLabel>}\n          <FormControl>\n            {renderField(field)}\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nexport function FormSection({ title, description, children, className }: FormSectionProps) {\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div className=\"space-y-1\">\n        <h3 className=\"text-lg font-medium\">{title}</h3>\n        {description && (\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        )}\n      </div>\n      <div className=\"space-y-4\">\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport function ConditionalField<T extends FieldValues>({\n  form,\n  when,\n  equals,\n  children\n}: {\n  form: UseFormReturn<T>\n  when: FieldPath<T>\n  equals: any\n  children: React.ReactNode\n}) {\n  const watchedValue = form.watch(when)\n\n  if (watchedValue === equals) {\n    return <>{children}</>\n  }\n\n  return null\n}\n",
      "type": "registry:component"
    }
  ]
}