{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-uploader",
  "type": "registry:component",
  "title": "File Uploader",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A file uploader component",
  "registryDependencies": [
    "button",
    "card",
    "badge"
  ],
  "files": [
    {
      "path": "registry/new-york/file-uploader/file-uploader.tsx",
      "content": "\"use client\"\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Upload, X, File, FileText, FileVideo, FileAudio, Check, AlertCircle, Image as ImageIcon } from 'lucide-react';\n\nconst Progress = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { value?: number }\n>(({ className, value = 0, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"relative w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <div\n      className=\"h-full w-full flex-1 bg-primary transition-all duration-300 ease-in-out\"\n      style={{ width: `${value}%` }}\n    />\n  </div>\n));\nProgress.displayName = \"Progress\";\n\nexport interface FileWithPreview {\n  id: string;\n  file: File;\n  name: string;\n  size: number;\n  type: string;\n  progress: number;\n  status: 'uploading' | 'complete' | 'error';\n  error?: string | null;\n  preview?: string | null;\n}\n\nexport interface FileUploaderProps {\n  onFilesReady?: (files: File[]) => void;\n  maxFiles?: number;\n  maxSize?: number;\n  accept?: string[];\n  className?: string;\n}\n\nexport function FileUploader({\n  onFilesReady,\n  maxFiles = 10,\n  maxSize = 10 * 1024 * 1024,\n  accept = ['image/*', 'application/pdf', 'text/*'],\n  className\n}: FileUploaderProps) {\n  const [files, setFiles] = useState<FileWithPreview[]>([]);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    return () => {\n      files.forEach(file => {\n        if (file.preview) URL.revokeObjectURL(file.preview);\n      });\n    };\n  }, [files]);\n\n  const getFileIcon = useCallback((file: File) => {\n    if (file.type.startsWith('image/')) return <ImageIcon className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type.startsWith('video/')) return <FileVideo className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type.startsWith('audio/')) return <FileAudio className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    if (file.type === 'application/pdf') return <FileText className=\"w-4 h-4\" aria-hidden=\"true\" />;\n    return <File className=\"w-4 h-4\" aria-hidden=\"true\" />;\n  }, []);\n\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }, []);\n\n  const validateFile = useCallback((file: File) => {\n    if (file.size > maxSize) {\n      return `File size exceeds ${formatFileSize(maxSize)}`;\n    }\n\n    const fileType = file.type;\n    const isAccepted = accept.some(type => {\n      if (type.endsWith('/*')) {\n        return fileType.startsWith(type.slice(0, -1));\n      }\n      return fileType === type;\n    });\n\n    if (!isAccepted) {\n      return 'File type not supported';\n    }\n\n    return null;\n  }, [maxSize, accept, formatFileSize]);\n\n  const addFiles = useCallback((newFiles: FileList) => {\n    if (files.length >= maxFiles) return;\n\n    const filesToAdd = Array.from(newFiles).slice(0, maxFiles - files.length);\n\n    const processedFiles = filesToAdd.map(file => {\n      const error = validateFile(file);\n      const isImage = file.type.startsWith('image/');\n\n      return {\n        id: Math.random().toString(36).substring(2, 11),\n        file,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        progress: error ? 0 : 100,\n        status: error ? 'error' : 'complete',\n        error,\n        preview: isImage ? URL.createObjectURL(file) : null\n      } as FileWithPreview;\n    });\n\n    const newFileList = [...files, ...processedFiles];\n    setFiles(newFileList);\n\n    const validFiles = newFileList.filter(f => !f.error).map(f => f.file);\n    if (onFilesReady) {\n      onFilesReady(validFiles);\n    }\n  }, [files, maxFiles, validateFile, onFilesReady]);\n\n  const removeFile = useCallback((fileId: string) => {\n    setFiles(prevFiles => {\n      const fileToRemove = prevFiles.find(f => f.id === fileId);\n      if (fileToRemove?.preview) {\n        URL.revokeObjectURL(fileToRemove.preview);\n      }\n\n      const updatedFiles = prevFiles.filter(f => f.id !== fileId);\n\n      if (onFilesReady) {\n        const validFiles = updatedFiles.filter(f => !f.error).map(f => f.file);\n        onFilesReady(validFiles);\n      }\n\n      return updatedFiles;\n    });\n  }, [onFilesReady]);\n\n  const handleDrag = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      addFiles(e.dataTransfer.files);\n    }\n  }, [addFiles]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      addFiles(e.target.files);\n    }\n  }, [addFiles]);\n\n  const clearAllFiles = useCallback(() => {\n    files.forEach(file => {\n      if (file.preview) URL.revokeObjectURL(file.preview);\n    });\n\n    setFiles([]);\n    if (onFilesReady) {\n      onFilesReady([]);\n    }\n  }, [files, onFilesReady]);\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  const getReadableFileTypes = useCallback(() => {\n    return accept.map(type => {\n      if (type === 'image/*') return 'Images';\n      if (type === 'application/pdf') return 'PDF';\n      if (type === 'text/*') return 'Text files';\n      if (type === 'video/*') return 'Videos';\n      if (type === 'audio/*') return 'Audio';\n      return type;\n    });\n  }, [accept]);\n\n  return (\n    <div className={cn(\"w-full space-y-4\", className)}>\n      <Card\n        className={cn(\n          \"relative border-2 border-dashed transition-colors duration-200\",\n          dragActive ? \"border-primary bg-primary/5\" : \"border-muted\",\n          files.length >= maxFiles && \"opacity-50 pointer-events-none\"\n        )}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        <CardContent className=\"flex flex-col items-center justify-center p-8 text-center\">\n          <div className={cn(\n            \"flex items-center justify-center w-16 h-16 rounded-full mb-4 transition-colors\",\n            dragActive\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-muted/50 text-muted-foreground\"\n          )}>\n            <Upload className=\"w-8 h-8\" />\n          </div>\n\n          <h3 className=\"text-lg font-semibold mb-2\">\n            {dragActive ? \"Drop files here\" : \"Upload Files\"}\n          </h3>\n\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Drag and drop files here or click to browse\n          </p>\n\n          <div className=\"flex flex-wrap gap-2 mb-4 justify-center\">\n            {getReadableFileTypes().map((type, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                {type}\n              </Badge>\n            ))}\n          </div>\n\n          <Button\n            onClick={openFileDialog}\n            variant=\"outline\"\n            className=\"transition-all duration-200 hover:bg-primary hover:text-primary-foreground\"\n            disabled={files.length >= maxFiles}\n          >\n            Choose Files\n          </Button>\n\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            Max {maxFiles} files, up to {formatFileSize(maxSize)} each\n          </p>\n        </CardContent>\n\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept={accept.join(',')}\n          onChange={handleInputChange}\n          className=\"hidden\"\n        />\n      </Card>\n\n      {files.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-sm font-medium\">Uploaded Files ({files.length}/{maxFiles})</h4>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearAllFiles}\n              className=\"text-xs hover:bg-destructive/10 hover:text-destructive\"\n            >\n              Clear All\n            </Button>\n          </div>\n\n          {files.map((fileData) => (\n            <Card key={fileData.id} className=\"relative overflow-hidden group\">\n              <div className={cn(\n                \"absolute inset-0 opacity-0 transition-opacity duration-200\",\n                fileData.error ? \"bg-destructive/5\" : \"bg-primary/5\"\n              )} />\n              <CardContent className=\"p-4 relative\">\n                <div className=\"flex items-start gap-3\">\n                  {fileData.preview ? (\n                    <div className=\"relative w-12 h-12 rounded-md overflow-hidden flex-shrink-0 border\">\n                      {/* eslint-disable-next-line @next/next/no-img-element */}\n                      <img\n                        src={fileData.preview}\n                        alt={fileData.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"w-12 h-12 bg-muted rounded-md flex items-center justify-center flex-shrink-0 border\">\n                      {fileData.error ? (\n                        <AlertCircle className=\"w-6 h-6 text-destructive\" />\n                      ) : (\n                        getFileIcon(fileData.file)\n                      )}\n                    </div>\n                  )}\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-sm font-medium truncate\">{fileData.name}</p>\n                      {fileData.status === 'complete' && !fileData.error && (\n                        <Check className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                      )}\n                    </div>\n\n                    <p className=\"text-xs text-muted-foreground mb-2\">\n                      {formatFileSize(fileData.size)} • {fileData.type}\n                    </p>\n\n                    {fileData.error ? (\n                      <p className=\"text-xs text-destructive flex items-center gap-1\">\n                        <AlertCircle className=\"w-3 h-3\" /> {fileData.error}\n                      </p>\n                    ) : (\n                      <Progress value={fileData.progress} className=\"h-2\" />\n                    )}\n                  </div>\n\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeFile(fileData.id)}\n                    className=\"flex-shrink-0 h-8 w-8 rounded-full opacity-70 hover:opacity-100 hover:bg-destructive/10 hover:text-destructive\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}",
      "type": "registry:component"
    }
  ]
}