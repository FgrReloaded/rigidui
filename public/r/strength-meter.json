{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "strength-meter",
  "type": "registry:component",
  "title": "Strength Meter",
  "author": "Nitish Singh <devxnitish@gmail.com>",
  "description": "A password strength meter component",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/strength-meter/strength-meter.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Eye, EyeOff, Check, X, RefreshCw } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nconst strengthMeterVariants = cva(\n  \"transition-all w-full h-2 rounded-full bg-gray-200 dark:bg-gray-700 mt-1 flex gap-1\",\n  {\n    variants: {\n      size: {\n        default: \"h-2\",\n        sm: \"h-1.5\",\n        lg: \"h-3\",\n      },\n      animated: {\n        true: \"\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n      animated: true,\n    },\n  }\n)\n\nconst strengthBarSegmentVariants = cva(\n  \"h-full rounded-full transition-all duration-300 ease-in-out\",\n  {\n    variants: {\n      strength: {\n        empty: \"bg-transparent\",\n        weak: \"bg-red-500\",\n        fair: \"bg-orange-500\",\n        good: \"bg-yellow-500\",\n        strong: \"bg-green-500\",\n      },\n      animated: {\n        true: \"animate-pulse\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      strength: \"empty\",\n      animated: false,\n    },\n  }\n)\n\nexport type StrengthLevel = \"empty\" | \"weak\" | \"fair\" | \"good\" | \"strong\"\n\nexport interface PasswordStrengthRequirement {\n  label: string\n  validator: (password: string) => boolean\n}\n\nexport interface PasswordStrengthMeterProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof strengthMeterVariants> {\n  value?: string\n  onValueChange?: (value: string) => void\n  showText?: boolean\n  showRequirements?: boolean\n  segments?: number\n  strengthThresholds?: Record<StrengthLevel, number>\n  requirements?: PasswordStrengthRequirement[]\n  customCalculateStrength?: (password: string) => number\n  showPasswordToggle?: boolean\n  strengthLabels?: Record<StrengthLevel, string>\n  className?: string\n  meterClassName?: string\n  inputClassName?: string\n  placeholder?: string\n  enableAutoGenerate?: boolean\n  autoGenerateLength?: number\n}\n\nconst defaultRequirements: PasswordStrengthRequirement[] = [\n  {\n    label: \"At least 8 characters\",\n    validator: (password) => password.length >= 8,\n  },\n  {\n    label: \"At least one lowercase letter\",\n    validator: (password) => /[a-z]/.test(password),\n  },\n  {\n    label: \"At least one uppercase letter\",\n    validator: (password) => /[A-Z]/.test(password),\n  },\n  {\n    label: \"At least one number\",\n    validator: (password) => /\\d/.test(password),\n  },\n  {\n    label: \"At least one special character\",\n    validator: (password) => /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n  },\n]\n\nconst defaultStrengthLabels = {\n  empty: \"Empty\",\n  weak: \"Weak\",\n  fair: \"Fair\",\n  good: \"Good\",\n  strong: \"Strong\",\n}\n\nconst defaultStrengthThresholds = {\n  empty: 0,\n  weak: 1,\n  fair: 40,\n  good: 70,\n  strong: 90,\n}\n\nexport function PasswordStrengthMeter({\n  value = \"\",\n  onValueChange,\n  showText = true,\n  showRequirements = true,\n  segments = 4,\n  strengthThresholds = defaultStrengthThresholds,\n  requirements = defaultRequirements,\n  customCalculateStrength,\n  showPasswordToggle = true,\n  strengthLabels = defaultStrengthLabels,\n  className,\n  meterClassName,\n  inputClassName,\n  placeholder = \"Enter password\",\n  size,\n  animated = true,\n  enableAutoGenerate = false,\n  autoGenerateLength = 10,\n  ...props\n}: PasswordStrengthMeterProps) {\n  const [password, setPassword] = React.useState(value)\n  const [showPassword, setShowPassword] = React.useState(false)\n\n  React.useEffect(() => {\n    setPassword(value)\n  }, [value])\n\n  const generateStrongPassword = (length: number = autoGenerateLength): string => {\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const specialChars = '!@#$%^&*(),.?\":{}|<>'\n\n    const allChars = lowercase + uppercase + numbers + specialChars\n\n    let password = ''\n\n    password += lowercase[Math.floor(Math.random() * lowercase.length)]\n    password += uppercase[Math.floor(Math.random() * uppercase.length)]\n    password += numbers[Math.floor(Math.random() * numbers.length)]\n    password += specialChars[Math.floor(Math.random() * specialChars.length)]\n\n    for (let i = 4; i < length; i++) {\n      password += allChars[Math.floor(Math.random() * allChars.length)]\n    }\n\n    return password.split('').sort(() => Math.random() - 0.5).join('')\n  }\n\n  const handleGeneratePassword = () => {\n    const newPassword = generateStrongPassword(autoGenerateLength)\n    setPassword(newPassword)\n    onValueChange?.(newPassword)\n  }\n\n  const calculateBaseStrength = (password: string): number => {\n    if (!password) return 0\n\n    let score = 0\n    let passedRequirements = 0\n\n    requirements.forEach((requirement) => {\n      if (requirement.validator(password)) {\n        passedRequirements++\n      }\n    })\n\n    score = (passedRequirements / requirements.length) * 100\n\n    if (password.length > 12) score += 10\n    if (password.length > 16) score += 10\n    if (/[!@#$%^&*(),.?\":{}|<>]{2,}/.test(password)) score += 10\n\n    return Math.min(score, 100)\n  }\n\n  const calculateStrength = customCalculateStrength || calculateBaseStrength\n  const strengthScore = calculateStrength(password)\n\n  const getStrengthLevel = (): StrengthLevel => {\n    if (strengthScore >= strengthThresholds.strong) return \"strong\"\n    if (strengthScore >= strengthThresholds.good) return \"good\"\n    if (strengthScore >= strengthThresholds.fair) return \"fair\"\n    if (strengthScore >= strengthThresholds.weak) return \"weak\"\n    return \"empty\"\n  }\n\n  const strengthLevel = getStrengthLevel()\n\n  const getSegmentStrength = (index: number): StrengthLevel => {\n    const segmentThreshold = (index + 1) * (100 / segments)\n\n    if (strengthScore >= segmentThreshold) {\n      if (strengthLevel === \"strong\") return \"strong\"\n      if (strengthLevel === \"good\") return \"good\"\n      if (strengthLevel === \"fair\") return \"fair\"\n      if (strengthLevel === \"weak\") return \"weak\"\n    }\n\n    return \"empty\"\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setPassword(newValue)\n    onValueChange?.(newValue)\n  }\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword)\n  }\n\n  const getPassedRequirements = (): PasswordStrengthRequirement[] => {\n    return requirements.filter((requirement) => requirement.validator(password))\n  }\n\n  const getStrengthColor = (): string => {\n    switch (strengthLevel) {\n      case \"strong\":\n        return \"text-green-500\"\n      case \"good\":\n        return \"text-yellow-500\"\n      case \"fair\":\n        return \"text-orange-500\"\n      case \"weak\":\n        return \"text-red-500\"\n      default:\n        return \"text-gray-400\"\n    }\n  }\n\n  return (\n    <div className={cn(\"space-y-2\", className)} {...props}>\n      <div className=\"relative\">\n        <Input\n          type={showPassword ? \"text\" : \"password\"}\n          value={password}\n          onChange={handleChange}\n          className={cn(\n            showPasswordToggle && enableAutoGenerate ? \"pr-20\" : showPasswordToggle || enableAutoGenerate ? \"pr-10\" : \"\",\n            inputClassName\n          )}\n          placeholder={placeholder}\n        />\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1\">\n          {enableAutoGenerate && (\n            <button\n              type=\"button\"\n              onClick={handleGeneratePassword}\n              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors\"\n              aria-label=\"Generate strong password\"\n              title=\"Generate strong password\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </button>\n          )}\n          {showPasswordToggle && (\n            <button\n              type=\"button\"\n              onClick={togglePasswordVisibility}\n              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors\"\n              aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n            >\n              {showPassword ? (\n                <EyeOff className=\"h-4 w-4\" />\n              ) : (\n                <Eye className=\"h-4 w-4\" />\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div\n        className={cn(\n          strengthMeterVariants({ size, animated }),\n          meterClassName\n        )}\n      >\n        {Array.from({ length: segments }).map((_, i) => (\n          <div\n            key={i}\n            className={cn(\n              strengthBarSegmentVariants({\n                strength: getSegmentStrength(i),\n                animated: animated && getSegmentStrength(i) !== \"empty\" && strengthLevel !== \"strong\",\n              }),\n              \"flex-1\"\n            )}\n            style={{\n              transitionDelay: `${i * 75}ms`,\n            }}\n          />\n        ))}\n      </div>\n\n      {showText && password && (\n        <div className=\"flex items-center\">\n          <span className={cn(\"text-sm font-medium\", getStrengthColor())}>\n            {strengthLabels[strengthLevel]}\n          </span>\n          <span className=\"ml-auto text-xs text-gray-500 dark:text-gray-400\">\n            {getPassedRequirements().length} of {requirements.length} requirements met\n          </span>\n        </div>\n      )}\n\n      {showRequirements && (\n        <div className=\"space-y-3\">\n          {enableAutoGenerate && (\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <div className=\"flex items-center gap-2\">\n                <RefreshCw className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                  Auto-generate strong password\n                </span>\n              </div>\n              <button\n                type=\"button\"\n                onClick={handleGeneratePassword}\n                className=\"px-3 py-1 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 dark:text-blue-300 dark:bg-blue-900 dark:hover:bg-blue-800 rounded-md transition-colors\"\n              >\n                Generate\n              </button>\n            </div>\n          )}\n          <ul className=\"space-y-1.5\">\n            {requirements.map((requirement, index) => {\n              const passed = requirement.validator(password)\n              return (\n                <li\n                  key={index}\n                  className={cn(\n                    \"flex items-center gap-2 text-sm\",\n                    passed\n                      ? \"text-green-600 dark:text-green-500\"\n                      : \"text-gray-500 dark:text-gray-400\"\n                  )}\n                >\n                  {passed ? (\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                  ) : (\n                    <X className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                  {requirement.label}\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport function PasswordInput({\n  value,\n  onChange,\n  className,\n  showToggle = true,\n  ...props\n}: React.InputHTMLAttributes<HTMLInputElement> & {\n  showToggle?: boolean\n}) {\n  const [showPassword, setShowPassword] = React.useState(false)\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword)\n  }\n\n  return (\n    <div className=\"relative\">\n      <Input\n        type={showPassword ? \"text\" : \"password\"}\n        className={cn(\"pr-10\", className)}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n      {showToggle && (\n        <button\n          type=\"button\"\n          onClick={togglePasswordVisibility}\n          className=\"absolute right-3 top-1/2 -translate-y-1/2 \"\n          aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n        >\n          {showPassword ? (\n            <EyeOff className=\"h-4 w-4\" />\n          ) : (\n            <Eye className=\"h-4 w-4\" />\n          )}\n        </button>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}