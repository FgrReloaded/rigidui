{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "location-picker",
  "type": "registry:component",
  "title": "Location Locator",
  "description": "A location locator component",
  "registryDependencies": [
    "button",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "registry/new-york/location-picker/location-picker.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect } from 'react'\nimport { Input } from '@/components/ui/input'\nimport { MapPin, LoaderCircle, Search, MapPinned, Locate } from 'lucide-react'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { Button } from \"@/components/ui/button\"\n\ntype LocationSuggestion = {\n  display_name: string;\n  place_id: number;\n  address: {\n    city?: string;\n    county?: string;\n    state?: string;\n    country?: string;\n    [key: string]: string | undefined;\n  };\n}\n\ninterface LocationPickerProps {\n  className?: string;\n  autoDetectOnLoad?: boolean;\n  defaultLocation?: string;\n}\n\nexport function LocationPicker({\n  className,\n  autoDetectOnLoad = false,\n  defaultLocation = \"\",\n}: LocationPickerProps) {\n  const [activeCity, setActiveCity] = useState(defaultLocation)\n  const [isLoading, setIsLoading] = useState(false)\n  const [locationSearch, setLocationSearch] = useState('')\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n  const [suggestions, setSuggestions] = useState<LocationSuggestion[]>([])\n  const [isFetchingSuggestions, setIsFetchingSuggestions] = useState(false)\n\n  const API_URL = \"https://nominatim.openstreetmap.org\"\n\n  const getLocation = async (lat: number, long: number) => {\n    setIsLoading(true)\n    try {\n      const res = await fetch(`${API_URL}/reverse?lat=${lat}&lon=${long}&format=json`)\n      const data = await res.json()\n      const city = data.address?.county || data.address?.city || data.address?.state || ''\n\n      if (city) {\n        setActiveCity(city)\n      }\n    } catch (error) {\n      console.log(\"Error fetching location:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const searchLocation = async () => {\n    if (!locationSearch.trim()) return\n\n    setIsLoading(true)\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(locationSearch)}&format=json&addressdetails=1`\n      )\n      const data = await res.json()\n\n      if (data && data.length > 0) {\n        const place = data[0]\n        const city = place.address?.city || place.address?.county || place.address?.state || ''\n\n        setActiveCity(city)\n        setIsPopoverOpen(false)\n      } else {\n        console.log(\"No location found\")\n      }\n    } catch (error) {\n      console.log(\"Error searching location:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getCurrentLocation = () => {\n    setIsLoading(true)\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords\n        getLocation(latitude, longitude)\n      },\n      (error) => {\n        console.log(\"Unable to retrieve location:\", error)\n        setIsLoading(false)\n      }\n    )\n  }\n\n  const fetchSuggestions = async (query: string) => {\n    if (!query.trim() || query.length < 2) {\n      setSuggestions([]);\n      return;\n    }\n\n    setIsFetchingSuggestions(true);\n    try {\n      const res = await fetch(\n        `${API_URL}/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`\n      );\n      const data = await res.json();\n      setSuggestions(data);\n    } catch (error) {\n      console.log(\"Error fetching suggestions:\", error);\n      setSuggestions([]);\n    } finally {\n      setIsFetchingSuggestions(false);\n    }\n  };\n\n  const selectSuggestion = (suggestion: LocationSuggestion) => {\n    const city = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    setActiveCity(city);\n    setLocationSearch(city);\n    setSuggestions([]);\n  };\n\n  const formatLocationName = (suggestion: LocationSuggestion) => {\n    const mainName = suggestion.address?.city || suggestion.address?.county || suggestion.address?.state || '';\n    const region = suggestion.address?.state || suggestion.address?.country || '';\n\n    if (mainName && region && mainName !== region) {\n      return `${mainName}, ${region}`;\n    }\n    return mainName || suggestion.display_name.split(',')[0];\n  };\n\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      fetchSuggestions(locationSearch);\n    }, 300);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [locationSearch]);\n\n  useEffect(() => {\n    if (!isPopoverOpen) {\n      setSuggestions([]);\n    }\n  }, [isPopoverOpen]);\n\n  useEffect(() => {\n    if (autoDetectOnLoad && !activeCity) {\n      getCurrentLocation();\n    }\n  }, [autoDetectOnLoad]);\n\n\n  return (\n    <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n      <PopoverTrigger asChild>\n        <div className={`flex items-center gap-2 text-gray-700 hover:text-gray-900 border border-transparent hover:border-b-black cursor-pointer px-2 py-1 hover:bg-gray-50 transition-colors ${className}`}>\n          <MapPin size={16} className=\"text-swadeyellow\" />\n          {isLoading ? (\n            <div className=\"flex items-center gap-1\">\n              <LoaderCircle size={14} className=\"animate-spin\" />\n              <span className=\"text-sm\">Locating...</span>\n            </div>\n          ) : (\n            <span className=\"text-sm font-medium\">\n              {activeCity.length > 15 ? activeCity.slice(0, 15) + '...' : activeCity || 'Select Location'}\n            </span>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0 shadow-lg border-0 border-swade border-t-2\" side=\"bottom\" align=\"start\" sideOffset={20}>\n        <div className=\"p-4 border-b\">\n          <h4 className=\"font-medium text-lg mb-1\">Change location</h4>\n          <p className=\"text-sm text-gray-500\">Find products near you</p>\n        </div>\n\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Enter city, district, or area\"\n                value={locationSearch}\n                onChange={(e) => setLocationSearch(e.target.value)}\n                onKeyUp={(e) => e.key === 'Enter' && suggestions.length === 0 && searchLocation()}\n                className=\"pl-10 pr-10 rounded-full border-gray-300 focus:border-swadeyellow focus:ring-1 focus:ring-swadeyellow\"\n              />\n            </div>\n\n            <Button\n              className=\"rounded-full h-10 w-10 p-0\"\n              variant=\"outline\"\n              onClick={searchLocation}\n              disabled={isLoading || !locationSearch.trim()}\n              title=\"Search Location\"\n            >\n              {isLoading ? (\n                <LoaderCircle className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Search className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onClick={getCurrentLocation}\n              className=\"rounded-full h-10 w-10 p-0\"\n              title=\"Use Current Location\"\n            >\n              <Locate className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {suggestions.length > 0 && (\n            <div className=\"z-50 w-full bg-white rounded-md border border-gray-200 shadow-lg max-h-60 overflow-y-auto mt-1 mb-4\">\n              {suggestions.map((suggestion) => (\n                <div\n                  key={suggestion.place_id}\n                  className=\"px-4 py-2 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-0 transition-colors\"\n                  onClick={() => selectSuggestion(suggestion)}\n                >\n                  <div className=\"flex items-start\">\n                    <MapPinned size={16} className=\"text-swadeyellow mt-0.5 mr-2 flex-shrink-0\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">\n                        {formatLocationName(suggestion)}\n                      </p>\n                      <p className=\"text-xs text-gray-500 truncate max-w-[250px]\">\n                        {suggestion.display_name}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isFetchingSuggestions && locationSearch.length >= 2 && suggestions.length === 0 && (\n            <div className=\"z-50 w-full bg-white rounded-md border border-gray-200 shadow-md p-4 text-center mt-1 mb-4\">\n              <LoaderCircle size={20} className=\"animate-spin mx-auto text-swadeyellow\" />\n              <p className=\"text-sm text-gray-500 mt-1\">Searching locations...</p>\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}